
Lab3Exercises.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b7c  08002b7c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b7c  08002b7c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b7c  08002b7c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000005c  08002be0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002be0  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098ab  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbf  00000000  00000000  00029930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002bf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001a47  00000000  00000000  0002c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bba9  00000000  00000000  0002e32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825b3  00000000  00000000  00039ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc48b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002930  00000000  00000000  000bc4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b28 	.word	0x08002b28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002b28 	.word	0x08002b28

0800014c <FSMLightModification>:
 */

#include "FSMLightModification.h"

void FSMLightModification()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status)
 8000150:	4ba7      	ldr	r3, [pc, #668]	; (80003f0 <FSMLightModification+0x2a4>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b2c      	cmp	r3, #44	; 0x2c
 8000156:	d06f      	beq.n	8000238 <FSMLightModification+0xec>
 8000158:	2b2c      	cmp	r3, #44	; 0x2c
 800015a:	f300 813f 	bgt.w	80003dc <FSMLightModification+0x290>
 800015e:	2b2a      	cmp	r3, #42	; 0x2a
 8000160:	d003      	beq.n	800016a <FSMLightModification+0x1e>
 8000162:	2b2b      	cmp	r3, #43	; 0x2b
 8000164:	f000 80cf 	beq.w	8000306 <FSMLightModification+0x1ba>
				}
			}
		}
		break;
	default:
		break;
 8000168:	e138      	b.n	80003dc <FSMLightModification+0x290>
		if(timer4_flag == 1)
 800016a:	4ba2      	ldr	r3, [pc, #648]	; (80003f4 <FSMLightModification+0x2a8>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	2b01      	cmp	r3, #1
 8000170:	d10a      	bne.n	8000188 <FSMLightModification+0x3c>
			setTimer4(25);
 8000172:	2019      	movs	r0, #25
 8000174:	f001 f8ee 	bl	8001354 <setTimer4>
			HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000178:	2120      	movs	r1, #32
 800017a:	489f      	ldr	r0, [pc, #636]	; (80003f8 <FSMLightModification+0x2ac>)
 800017c:	f001 fccb 	bl	8001b16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_LED1_GPIO_Port, RED_LED1_Pin);
 8000180:	2104      	movs	r1, #4
 8000182:	489d      	ldr	r0, [pc, #628]	; (80003f8 <FSMLightModification+0x2ac>)
 8000184:	f001 fcc7 	bl	8001b16 <HAL_GPIO_TogglePin>
		if(timer2_flag == 1)
 8000188:	4b9c      	ldr	r3, [pc, #624]	; (80003fc <FSMLightModification+0x2b0>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d113      	bne.n	80001b8 <FSMLightModification+0x6c>
			setTimer2(scan_led_time);
 8000190:	4b9b      	ldr	r3, [pc, #620]	; (8000400 <FSMLightModification+0x2b4>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4618      	mov	r0, r3
 8000196:	f001 f8b5 	bl	8001304 <setTimer2>
			if(count > 3)
 800019a:	4b9a      	ldr	r3, [pc, #616]	; (8000404 <FSMLightModification+0x2b8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b03      	cmp	r3, #3
 80001a0:	dd02      	ble.n	80001a8 <FSMLightModification+0x5c>
				count = 0;
 80001a2:	4b98      	ldr	r3, [pc, #608]	; (8000404 <FSMLightModification+0x2b8>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
			sevenSegDisplay(count++);
 80001a8:	4b96      	ldr	r3, [pc, #600]	; (8000404 <FSMLightModification+0x2b8>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	4995      	ldr	r1, [pc, #596]	; (8000404 <FSMLightModification+0x2b8>)
 80001b0:	600a      	str	r2, [r1, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 fe9e 	bl	8000ef4 <sevenSegDisplay>
		if(isButton2Pressed() == 1)
 80001b8:	f000 fc9a 	bl	8000af0 <isButton2Pressed>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d10d      	bne.n	80001de <FSMLightModification+0x92>
			red_time++;
 80001c2:	4b91      	ldr	r3, [pc, #580]	; (8000408 <FSMLightModification+0x2bc>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	3301      	adds	r3, #1
 80001c8:	4a8f      	ldr	r2, [pc, #572]	; (8000408 <FSMLightModification+0x2bc>)
 80001ca:	6013      	str	r3, [r2, #0]
			setLedBuffer(red_time, 1);
 80001cc:	4b8e      	ldr	r3, [pc, #568]	; (8000408 <FSMLightModification+0x2bc>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2101      	movs	r1, #1
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 fe26 	bl	8000e24 <setLedBuffer>
			count = 0;					// reset qu√©t led
 80001d8:	4b8a      	ldr	r3, [pc, #552]	; (8000404 <FSMLightModification+0x2b8>)
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
		if(isButton3Pressed() == 1)
 80001de:	f000 fca5 	bl	8000b2c <isButton3Pressed>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	f040 80fb 	bne.w	80003e0 <FSMLightModification+0x294>
			HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED_Pin
 80001ea:	2201      	movs	r2, #1
 80001ec:	f640 71fc 	movw	r1, #4092	; 0xffc
 80001f0:	4881      	ldr	r0, [pc, #516]	; (80003f8 <FSMLightModification+0x2ac>)
 80001f2:	f001 fc78 	bl	8001ae6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, A_LED_Pin|B_LED_Pin|C_LED_Pin|D_LED_Pin
 80001f6:	2201      	movs	r2, #1
 80001f8:	217f      	movs	r1, #127	; 0x7f
 80001fa:	4884      	ldr	r0, [pc, #528]	; (800040c <FSMLightModification+0x2c0>)
 80001fc:	f001 fc73 	bl	8001ae6 <HAL_GPIO_WritePin>
			status = MODIFY_YELLOW;
 8000200:	4b7b      	ldr	r3, [pc, #492]	; (80003f0 <FSMLightModification+0x2a4>)
 8000202:	2222      	movs	r2, #34	; 0x22
 8000204:	601a      	str	r2, [r3, #0]
			isButton1Pressed(); // reset button1_flag
 8000206:	f000 fc55 	bl	8000ab4 <isButton1Pressed>
			isButton2Pressed();
 800020a:	f000 fc71 	bl	8000af0 <isButton2Pressed>
			isButton3Pressed();
 800020e:	f000 fc8d 	bl	8000b2c <isButton3Pressed>
			count = 0;
 8000212:	4b7c      	ldr	r3, [pc, #496]	; (8000404 <FSMLightModification+0x2b8>)
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
			setLedBuffer(0, 2);
 8000218:	2102      	movs	r1, #2
 800021a:	2000      	movs	r0, #0
 800021c:	f000 fe02 	bl	8000e24 <setLedBuffer>
			setTimer4(25);
 8000220:	2019      	movs	r0, #25
 8000222:	f001 f897 	bl	8001354 <setTimer4>
			setTimer2(scan_led_time);
 8000226:	4b76      	ldr	r3, [pc, #472]	; (8000400 <FSMLightModification+0x2b4>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4618      	mov	r0, r3
 800022c:	f001 f86a 	bl	8001304 <setTimer2>
			timer2_flag = 1; // ngay lap tuc chay led 7 doan
 8000230:	4b72      	ldr	r3, [pc, #456]	; (80003fc <FSMLightModification+0x2b0>)
 8000232:	2201      	movs	r2, #1
 8000234:	601a      	str	r2, [r3, #0]
		break;
 8000236:	e0d3      	b.n	80003e0 <FSMLightModification+0x294>
		if(timer4_flag == 1)
 8000238:	4b6e      	ldr	r3, [pc, #440]	; (80003f4 <FSMLightModification+0x2a8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d10a      	bne.n	8000256 <FSMLightModification+0x10a>
			setTimer4(25);
 8000240:	2019      	movs	r0, #25
 8000242:	f001 f887 	bl	8001354 <setTimer4>
			HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin);
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	486b      	ldr	r0, [pc, #428]	; (80003f8 <FSMLightModification+0x2ac>)
 800024a:	f001 fc64 	bl	8001b16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin);
 800024e:	2110      	movs	r1, #16
 8000250:	4869      	ldr	r0, [pc, #420]	; (80003f8 <FSMLightModification+0x2ac>)
 8000252:	f001 fc60 	bl	8001b16 <HAL_GPIO_TogglePin>
		if(timer2_flag == 1)
 8000256:	4b69      	ldr	r3, [pc, #420]	; (80003fc <FSMLightModification+0x2b0>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d113      	bne.n	8000286 <FSMLightModification+0x13a>
			setTimer2(scan_led_time);
 800025e:	4b68      	ldr	r3, [pc, #416]	; (8000400 <FSMLightModification+0x2b4>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4618      	mov	r0, r3
 8000264:	f001 f84e 	bl	8001304 <setTimer2>
			if(count > 3)
 8000268:	4b66      	ldr	r3, [pc, #408]	; (8000404 <FSMLightModification+0x2b8>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b03      	cmp	r3, #3
 800026e:	dd02      	ble.n	8000276 <FSMLightModification+0x12a>
				count = 0;
 8000270:	4b64      	ldr	r3, [pc, #400]	; (8000404 <FSMLightModification+0x2b8>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
			sevenSegDisplay(count++);
 8000276:	4b63      	ldr	r3, [pc, #396]	; (8000404 <FSMLightModification+0x2b8>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	1c5a      	adds	r2, r3, #1
 800027c:	4961      	ldr	r1, [pc, #388]	; (8000404 <FSMLightModification+0x2b8>)
 800027e:	600a      	str	r2, [r1, #0]
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fe37 	bl	8000ef4 <sevenSegDisplay>
		if(isButton2Pressed() == 1)
 8000286:	f000 fc33 	bl	8000af0 <isButton2Pressed>
 800028a:	4603      	mov	r3, r0
 800028c:	2b01      	cmp	r3, #1
 800028e:	d10d      	bne.n	80002ac <FSMLightModification+0x160>
			yellow_time++;
 8000290:	4b5f      	ldr	r3, [pc, #380]	; (8000410 <FSMLightModification+0x2c4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	3301      	adds	r3, #1
 8000296:	4a5e      	ldr	r2, [pc, #376]	; (8000410 <FSMLightModification+0x2c4>)
 8000298:	6013      	str	r3, [r2, #0]
			setLedBuffer(yellow_time, 2);
 800029a:	4b5d      	ldr	r3, [pc, #372]	; (8000410 <FSMLightModification+0x2c4>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2102      	movs	r1, #2
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fdbf 	bl	8000e24 <setLedBuffer>
			count = 0;					// reset qu√©t led
 80002a6:	4b57      	ldr	r3, [pc, #348]	; (8000404 <FSMLightModification+0x2b8>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
		if(isButton3Pressed() == 1)
 80002ac:	f000 fc3e 	bl	8000b2c <isButton3Pressed>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	f040 8096 	bne.w	80003e4 <FSMLightModification+0x298>
			HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED_Pin
 80002b8:	2201      	movs	r2, #1
 80002ba:	f640 71fc 	movw	r1, #4092	; 0xffc
 80002be:	484e      	ldr	r0, [pc, #312]	; (80003f8 <FSMLightModification+0x2ac>)
 80002c0:	f001 fc11 	bl	8001ae6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, A_LED_Pin|B_LED_Pin|C_LED_Pin|D_LED_Pin
 80002c4:	2201      	movs	r2, #1
 80002c6:	217f      	movs	r1, #127	; 0x7f
 80002c8:	4850      	ldr	r0, [pc, #320]	; (800040c <FSMLightModification+0x2c0>)
 80002ca:	f001 fc0c 	bl	8001ae6 <HAL_GPIO_WritePin>
			status = MODIFY_GREEN;
 80002ce:	4b48      	ldr	r3, [pc, #288]	; (80003f0 <FSMLightModification+0x2a4>)
 80002d0:	2221      	movs	r2, #33	; 0x21
 80002d2:	601a      	str	r2, [r3, #0]
			isButton1Pressed(); // reset button1_flag
 80002d4:	f000 fbee 	bl	8000ab4 <isButton1Pressed>
			isButton2Pressed();
 80002d8:	f000 fc0a 	bl	8000af0 <isButton2Pressed>
			isButton3Pressed();
 80002dc:	f000 fc26 	bl	8000b2c <isButton3Pressed>
			count = 0;
 80002e0:	4b48      	ldr	r3, [pc, #288]	; (8000404 <FSMLightModification+0x2b8>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
			setLedBuffer(0, 3);
 80002e6:	2103      	movs	r1, #3
 80002e8:	2000      	movs	r0, #0
 80002ea:	f000 fd9b 	bl	8000e24 <setLedBuffer>
			setTimer4(25);
 80002ee:	2019      	movs	r0, #25
 80002f0:	f001 f830 	bl	8001354 <setTimer4>
			setTimer2(scan_led_time);
 80002f4:	4b42      	ldr	r3, [pc, #264]	; (8000400 <FSMLightModification+0x2b4>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 f803 	bl	8001304 <setTimer2>
			timer2_flag = 1; // ngay lap tuc chay led 7 doan
 80002fe:	4b3f      	ldr	r3, [pc, #252]	; (80003fc <FSMLightModification+0x2b0>)
 8000300:	2201      	movs	r2, #1
 8000302:	601a      	str	r2, [r3, #0]
		break;
 8000304:	e06e      	b.n	80003e4 <FSMLightModification+0x298>
		if(timer4_flag == 1)
 8000306:	4b3b      	ldr	r3, [pc, #236]	; (80003f4 <FSMLightModification+0x2a8>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d10a      	bne.n	8000324 <FSMLightModification+0x1d8>
			setTimer4(25);
 800030e:	2019      	movs	r0, #25
 8000310:	f001 f820 	bl	8001354 <setTimer4>
			HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	4838      	ldr	r0, [pc, #224]	; (80003f8 <FSMLightModification+0x2ac>)
 8000318:	f001 fbfd 	bl	8001b16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin);
 800031c:	2108      	movs	r1, #8
 800031e:	4836      	ldr	r0, [pc, #216]	; (80003f8 <FSMLightModification+0x2ac>)
 8000320:	f001 fbf9 	bl	8001b16 <HAL_GPIO_TogglePin>
		if(timer2_flag == 1)
 8000324:	4b35      	ldr	r3, [pc, #212]	; (80003fc <FSMLightModification+0x2b0>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d113      	bne.n	8000354 <FSMLightModification+0x208>
			setTimer2(scan_led_time);
 800032c:	4b34      	ldr	r3, [pc, #208]	; (8000400 <FSMLightModification+0x2b4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4618      	mov	r0, r3
 8000332:	f000 ffe7 	bl	8001304 <setTimer2>
			if(count > 3)
 8000336:	4b33      	ldr	r3, [pc, #204]	; (8000404 <FSMLightModification+0x2b8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b03      	cmp	r3, #3
 800033c:	dd02      	ble.n	8000344 <FSMLightModification+0x1f8>
				count = 0;
 800033e:	4b31      	ldr	r3, [pc, #196]	; (8000404 <FSMLightModification+0x2b8>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
			sevenSegDisplay(count++);
 8000344:	4b2f      	ldr	r3, [pc, #188]	; (8000404 <FSMLightModification+0x2b8>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	492e      	ldr	r1, [pc, #184]	; (8000404 <FSMLightModification+0x2b8>)
 800034c:	600a      	str	r2, [r1, #0]
 800034e:	4618      	mov	r0, r3
 8000350:	f000 fdd0 	bl	8000ef4 <sevenSegDisplay>
		if(isButton2Pressed() == 1)
 8000354:	f000 fbcc 	bl	8000af0 <isButton2Pressed>
 8000358:	4603      	mov	r3, r0
 800035a:	2b01      	cmp	r3, #1
 800035c:	d10d      	bne.n	800037a <FSMLightModification+0x22e>
			yellow_time++;
 800035e:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <FSMLightModification+0x2c4>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	3301      	adds	r3, #1
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <FSMLightModification+0x2c4>)
 8000366:	6013      	str	r3, [r2, #0]
			setLedBuffer(yellow_time, 2);
 8000368:	4b29      	ldr	r3, [pc, #164]	; (8000410 <FSMLightModification+0x2c4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fd58 	bl	8000e24 <setLedBuffer>
			count = 0;					// reset qu√©t led
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <FSMLightModification+0x2b8>)
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
		if(isButton3Pressed() == 1)
 800037a:	f000 fbd7 	bl	8000b2c <isButton3Pressed>
 800037e:	4603      	mov	r3, r0
 8000380:	2b01      	cmp	r3, #1
 8000382:	d131      	bne.n	80003e8 <FSMLightModification+0x29c>
			if(red_time == green_time+yellow_time)
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <FSMLightModification+0x2c8>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4b21      	ldr	r3, [pc, #132]	; (8000410 <FSMLightModification+0x2c4>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	441a      	add	r2, r3
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <FSMLightModification+0x2bc>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	429a      	cmp	r2, r3
 8000394:	d103      	bne.n	800039e <FSMLightModification+0x252>
				status = NORMAL_MODE;
 8000396:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <FSMLightModification+0x2a4>)
 8000398:	2215      	movs	r2, #21
 800039a:	601a      	str	r2, [r3, #0]
		break;
 800039c:	e024      	b.n	80003e8 <FSMLightModification+0x29c>
				if(red_time > green_time+yellow_time)
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <FSMLightModification+0x2c8>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <FSMLightModification+0x2c4>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	441a      	add	r2, r3
 80003a8:	4b17      	ldr	r3, [pc, #92]	; (8000408 <FSMLightModification+0x2bc>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	da0a      	bge.n	80003c6 <FSMLightModification+0x27a>
					green_time = red_time - yellow_time;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <FSMLightModification+0x2bc>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b16      	ldr	r3, [pc, #88]	; (8000410 <FSMLightModification+0x2c4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	4a16      	ldr	r2, [pc, #88]	; (8000414 <FSMLightModification+0x2c8>)
 80003bc:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <FSMLightModification+0x2a4>)
 80003c0:	2215      	movs	r2, #21
 80003c2:	601a      	str	r2, [r3, #0]
		break;
 80003c4:	e010      	b.n	80003e8 <FSMLightModification+0x29c>
					red_time = green_time + yellow_time;
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <FSMLightModification+0x2c8>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <FSMLightModification+0x2c4>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4413      	add	r3, r2
 80003d0:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <FSMLightModification+0x2bc>)
 80003d2:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <FSMLightModification+0x2a4>)
 80003d6:	2215      	movs	r2, #21
 80003d8:	601a      	str	r2, [r3, #0]
		break;
 80003da:	e005      	b.n	80003e8 <FSMLightModification+0x29c>
		break;
 80003dc:	bf00      	nop
 80003de:	e004      	b.n	80003ea <FSMLightModification+0x29e>
		break;
 80003e0:	bf00      	nop
 80003e2:	e002      	b.n	80003ea <FSMLightModification+0x29e>
		break;
 80003e4:	bf00      	nop
 80003e6:	e000      	b.n	80003ea <FSMLightModification+0x29e>
		break;
 80003e8:	bf00      	nop
	}
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000088 	.word	0x20000088
 80003f4:	200000a8 	.word	0x200000a8
 80003f8:	40010800 	.word	0x40010800
 80003fc:	200000a0 	.word	0x200000a0
 8000400:	08002b54 	.word	0x08002b54
 8000404:	20000084 	.word	0x20000084
 8000408:	20000044 	.word	0x20000044
 800040c:	40010c00 	.word	0x40010c00
 8000410:	2000004c 	.word	0x2000004c
 8000414:	20000048 	.word	0x20000048

08000418 <FSMModificationModeRun>:
 *      Author: hieun
 */
#include "FSMModificationMode.h"

void FSMModificationModeRun()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	switch(status)
 800041c:	4bb8      	ldr	r3, [pc, #736]	; (8000700 <FSMModificationModeRun+0x2e8>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3b1f      	subs	r3, #31
 8000422:	2b03      	cmp	r3, #3
 8000424:	f200 81c4 	bhi.w	80007b0 <FSMModificationModeRun+0x398>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <FSMModificationModeRun+0x18>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000441 	.word	0x08000441
 8000434:	0800048f 	.word	0x0800048f
 8000438:	0800065f 	.word	0x0800065f
 800043c:	0800056b 	.word	0x0800056b
	{
	case MODIFICATION_MODE:
		HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED_Pin
 8000440:	2201      	movs	r2, #1
 8000442:	f640 71fc 	movw	r1, #4092	; 0xffc
 8000446:	48af      	ldr	r0, [pc, #700]	; (8000704 <FSMModificationModeRun+0x2ec>)
 8000448:	f001 fb4d 	bl	8001ae6 <HAL_GPIO_WritePin>
		                          |GREEN_LED_Pin|YELLOW_LED_Pin|EN0_Pin|EN1_Pin
		                          |EN2_Pin|EN3_Pin, SET);
		HAL_GPIO_WritePin(GPIOB, A_LED_Pin|B_LED_Pin|C_LED_Pin|D_LED_Pin
 800044c:	2201      	movs	r2, #1
 800044e:	217f      	movs	r1, #127	; 0x7f
 8000450:	48ad      	ldr	r0, [pc, #692]	; (8000708 <FSMModificationModeRun+0x2f0>)
 8000452:	f001 fb48 	bl	8001ae6 <HAL_GPIO_WritePin>
		                          |E_LED_Pin|F_LED_Pin|G_LED_Pin, SET);
		count = 0; // reset count
 8000456:	4bad      	ldr	r3, [pc, #692]	; (800070c <FSMModificationModeRun+0x2f4>)
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
		isButton1Pressed(); // reset button1_flag
 800045c:	f000 fb2a 	bl	8000ab4 <isButton1Pressed>
		isButton2Pressed();
 8000460:	f000 fb46 	bl	8000af0 <isButton2Pressed>
		isButton3Pressed();
 8000464:	f000 fb62 	bl	8000b2c <isButton3Pressed>

		status = MODIFY_RED;
 8000468:	4ba5      	ldr	r3, [pc, #660]	; (8000700 <FSMModificationModeRun+0x2e8>)
 800046a:	2220      	movs	r2, #32
 800046c:	601a      	str	r2, [r3, #0]
		setTimer2(scan_led_time);
 800046e:	4ba8      	ldr	r3, [pc, #672]	; (8000710 <FSMModificationModeRun+0x2f8>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f000 ff46 	bl	8001304 <setTimer2>
		timer2_flag = 1; // ngay lap tuc chay led 7 doan
 8000478:	4ba6      	ldr	r3, [pc, #664]	; (8000714 <FSMModificationModeRun+0x2fc>)
 800047a:	2201      	movs	r2, #1
 800047c:	601a      	str	r2, [r3, #0]
		setLedBuffer(0, 1);
 800047e:	2101      	movs	r1, #1
 8000480:	2000      	movs	r0, #0
 8000482:	f000 fccf 	bl	8000e24 <setLedBuffer>

		setTimer4(25);
 8000486:	2019      	movs	r0, #25
 8000488:	f000 ff64 	bl	8001354 <setTimer4>
		break;
 800048c:	e197      	b.n	80007be <FSMModificationModeRun+0x3a6>

	case MODIFY_RED:
		if(timer4_flag == 1)
 800048e:	4ba2      	ldr	r3, [pc, #648]	; (8000718 <FSMModificationModeRun+0x300>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d10a      	bne.n	80004ac <FSMModificationModeRun+0x94>
		{
			setTimer4(25);
 8000496:	2019      	movs	r0, #25
 8000498:	f000 ff5c 	bl	8001354 <setTimer4>
			HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800049c:	2120      	movs	r1, #32
 800049e:	4899      	ldr	r0, [pc, #612]	; (8000704 <FSMModificationModeRun+0x2ec>)
 80004a0:	f001 fb39 	bl	8001b16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_LED1_GPIO_Port, RED_LED1_Pin);
 80004a4:	2104      	movs	r1, #4
 80004a6:	4897      	ldr	r0, [pc, #604]	; (8000704 <FSMModificationModeRun+0x2ec>)
 80004a8:	f001 fb35 	bl	8001b16 <HAL_GPIO_TogglePin>
		}

		if(timer2_flag == 1)
 80004ac:	4b99      	ldr	r3, [pc, #612]	; (8000714 <FSMModificationModeRun+0x2fc>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d113      	bne.n	80004dc <FSMModificationModeRun+0xc4>
		{
			setTimer2(scan_led_time);
 80004b4:	4b96      	ldr	r3, [pc, #600]	; (8000710 <FSMModificationModeRun+0x2f8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 ff23 	bl	8001304 <setTimer2>
			if(count > 3)
 80004be:	4b93      	ldr	r3, [pc, #588]	; (800070c <FSMModificationModeRun+0x2f4>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b03      	cmp	r3, #3
 80004c4:	dd02      	ble.n	80004cc <FSMModificationModeRun+0xb4>
			{
				count = 0;
 80004c6:	4b91      	ldr	r3, [pc, #580]	; (800070c <FSMModificationModeRun+0x2f4>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
			}

			sevenSegDisplay(count++);
 80004cc:	4b8f      	ldr	r3, [pc, #572]	; (800070c <FSMModificationModeRun+0x2f4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	1c5a      	adds	r2, r3, #1
 80004d2:	498e      	ldr	r1, [pc, #568]	; (800070c <FSMModificationModeRun+0x2f4>)
 80004d4:	600a      	str	r2, [r1, #0]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fd0c 	bl	8000ef4 <sevenSegDisplay>
		}


		if(isButton1Pressed() == 1)
 80004dc:	f000 faea 	bl	8000ab4 <isButton1Pressed>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d11a      	bne.n	800051c <FSMModificationModeRun+0x104>
		{
			status = MODIFY_YELLOW;
 80004e6:	4b86      	ldr	r3, [pc, #536]	; (8000700 <FSMModificationModeRun+0x2e8>)
 80004e8:	2222      	movs	r2, #34	; 0x22
 80004ea:	601a      	str	r2, [r3, #0]

			isButton1Pressed(); // reset button_flag
 80004ec:	f000 fae2 	bl	8000ab4 <isButton1Pressed>
			isButton2Pressed();
 80004f0:	f000 fafe 	bl	8000af0 <isButton2Pressed>
			isButton3Pressed();
 80004f4:	f000 fb1a 	bl	8000b2c <isButton3Pressed>

			count = 0;
 80004f8:	4b84      	ldr	r3, [pc, #528]	; (800070c <FSMModificationModeRun+0x2f4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
			setLedBuffer(0, 2);
 80004fe:	2102      	movs	r1, #2
 8000500:	2000      	movs	r0, #0
 8000502:	f000 fc8f 	bl	8000e24 <setLedBuffer>
			setTimer4(25);
 8000506:	2019      	movs	r0, #25
 8000508:	f000 ff24 	bl	8001354 <setTimer4>
			setTimer2(scan_led_time);
 800050c:	4b80      	ldr	r3, [pc, #512]	; (8000710 <FSMModificationModeRun+0x2f8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fef7 	bl	8001304 <setTimer2>
			timer2_flag = 1; // ngay lap tuc chay led 7 doan
 8000516:	4b7f      	ldr	r3, [pc, #508]	; (8000714 <FSMModificationModeRun+0x2fc>)
 8000518:	2201      	movs	r2, #1
 800051a:	601a      	str	r2, [r3, #0]
		}

		if(isButton2Pressed() == 1)
 800051c:	f000 fae8 	bl	8000af0 <isButton2Pressed>
 8000520:	4603      	mov	r3, r0
 8000522:	2b01      	cmp	r3, #1
 8000524:	f040 8146 	bne.w	80007b4 <FSMModificationModeRun+0x39c>
		{
			HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED_Pin
 8000528:	2201      	movs	r2, #1
 800052a:	f640 71fc 	movw	r1, #4092	; 0xffc
 800052e:	4875      	ldr	r0, [pc, #468]	; (8000704 <FSMModificationModeRun+0x2ec>)
 8000530:	f001 fad9 	bl	8001ae6 <HAL_GPIO_WritePin>
			                          |GREEN_LED_Pin|YELLOW_LED_Pin|EN0_Pin|EN1_Pin
			                          |EN2_Pin|EN3_Pin, SET);
			HAL_GPIO_WritePin(GPIOB, A_LED_Pin|B_LED_Pin|C_LED_Pin|D_LED_Pin
 8000534:	2201      	movs	r2, #1
 8000536:	217f      	movs	r1, #127	; 0x7f
 8000538:	4873      	ldr	r0, [pc, #460]	; (8000708 <FSMModificationModeRun+0x2f0>)
 800053a:	f001 fad4 	bl	8001ae6 <HAL_GPIO_WritePin>
			                          |E_LED_Pin|F_LED_Pin|G_LED_Pin, SET);
			count = 0;
 800053e:	4b73      	ldr	r3, [pc, #460]	; (800070c <FSMModificationModeRun+0x2f4>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
			red_time = 1;
 8000544:	4b75      	ldr	r3, [pc, #468]	; (800071c <FSMModificationModeRun+0x304>)
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]
			setLedBuffer(red_time, 1);
 800054a:	4b74      	ldr	r3, [pc, #464]	; (800071c <FSMModificationModeRun+0x304>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2101      	movs	r1, #1
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fc67 	bl	8000e24 <setLedBuffer>
			status = MODIFY_TIME_RED;
 8000556:	4b6a      	ldr	r3, [pc, #424]	; (8000700 <FSMModificationModeRun+0x2e8>)
 8000558:	222a      	movs	r2, #42	; 0x2a
 800055a:	601a      	str	r2, [r3, #0]

			isButton1Pressed(); // reset button1_flag
 800055c:	f000 faaa 	bl	8000ab4 <isButton1Pressed>
			isButton2Pressed();
 8000560:	f000 fac6 	bl	8000af0 <isButton2Pressed>
			isButton3Pressed();
 8000564:	f000 fae2 	bl	8000b2c <isButton3Pressed>
		}
		break;
 8000568:	e124      	b.n	80007b4 <FSMModificationModeRun+0x39c>

	case MODIFY_YELLOW:
		if(timer4_flag == 1)
 800056a:	4b6b      	ldr	r3, [pc, #428]	; (8000718 <FSMModificationModeRun+0x300>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d11e      	bne.n	80005b0 <FSMModificationModeRun+0x198>
		{
			setTimer4(25);
 8000572:	2019      	movs	r0, #25
 8000574:	f000 feee 	bl	8001354 <setTimer4>

			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2120      	movs	r1, #32
 800057c:	4861      	ldr	r0, [pc, #388]	; (8000704 <FSMModificationModeRun+0x2ec>)
 800057e:	f001 fab2 	bl	8001ae6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2104      	movs	r1, #4
 8000586:	485f      	ldr	r0, [pc, #380]	; (8000704 <FSMModificationModeRun+0x2ec>)
 8000588:	f001 faad 	bl	8001ae6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	485c      	ldr	r0, [pc, #368]	; (8000704 <FSMModificationModeRun+0x2ec>)
 8000592:	f001 faa8 	bl	8001ae6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2108      	movs	r1, #8
 800059a:	485a      	ldr	r0, [pc, #360]	; (8000704 <FSMModificationModeRun+0x2ec>)
 800059c:	f001 faa3 	bl	8001ae6 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin);
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	4858      	ldr	r0, [pc, #352]	; (8000704 <FSMModificationModeRun+0x2ec>)
 80005a4:	f001 fab7 	bl	8001b16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin);
 80005a8:	2110      	movs	r1, #16
 80005aa:	4856      	ldr	r0, [pc, #344]	; (8000704 <FSMModificationModeRun+0x2ec>)
 80005ac:	f001 fab3 	bl	8001b16 <HAL_GPIO_TogglePin>
		}

		if(timer2_flag == 1)
 80005b0:	4b58      	ldr	r3, [pc, #352]	; (8000714 <FSMModificationModeRun+0x2fc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d113      	bne.n	80005e0 <FSMModificationModeRun+0x1c8>
		{
			setTimer2(scan_led_time);
 80005b8:	4b55      	ldr	r3, [pc, #340]	; (8000710 <FSMModificationModeRun+0x2f8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fea1 	bl	8001304 <setTimer2>
			if(count > 3)
 80005c2:	4b52      	ldr	r3, [pc, #328]	; (800070c <FSMModificationModeRun+0x2f4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	dd02      	ble.n	80005d0 <FSMModificationModeRun+0x1b8>
			{
				count = 0;
 80005ca:	4b50      	ldr	r3, [pc, #320]	; (800070c <FSMModificationModeRun+0x2f4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
			}

			sevenSegDisplay(count++);
 80005d0:	4b4e      	ldr	r3, [pc, #312]	; (800070c <FSMModificationModeRun+0x2f4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	494d      	ldr	r1, [pc, #308]	; (800070c <FSMModificationModeRun+0x2f4>)
 80005d8:	600a      	str	r2, [r1, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fc8a 	bl	8000ef4 <sevenSegDisplay>
		}

		if(isButton1Pressed() == 1)
 80005e0:	f000 fa68 	bl	8000ab4 <isButton1Pressed>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d112      	bne.n	8000610 <FSMModificationModeRun+0x1f8>
		{
			status = MODIFY_GREEN;
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <FSMModificationModeRun+0x2e8>)
 80005ec:	2221      	movs	r2, #33	; 0x21
 80005ee:	601a      	str	r2, [r3, #0]

			isButton1Pressed(); // reset button1_flag
 80005f0:	f000 fa60 	bl	8000ab4 <isButton1Pressed>
			isButton2Pressed();
 80005f4:	f000 fa7c 	bl	8000af0 <isButton2Pressed>
			isButton3Pressed();
 80005f8:	f000 fa98 	bl	8000b2c <isButton3Pressed>

			count = 0;
 80005fc:	4b43      	ldr	r3, [pc, #268]	; (800070c <FSMModificationModeRun+0x2f4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
			setLedBuffer(0, 3);
 8000602:	2103      	movs	r1, #3
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fc0d 	bl	8000e24 <setLedBuffer>
			setTimer4(25);
 800060a:	2019      	movs	r0, #25
 800060c:	f000 fea2 	bl	8001354 <setTimer4>
		}

		if(isButton2Pressed() == 1)
 8000610:	f000 fa6e 	bl	8000af0 <isButton2Pressed>
 8000614:	4603      	mov	r3, r0
 8000616:	2b01      	cmp	r3, #1
 8000618:	f040 80ce 	bne.w	80007b8 <FSMModificationModeRun+0x3a0>
		{
			HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED_Pin
 800061c:	2201      	movs	r2, #1
 800061e:	f640 71fc 	movw	r1, #4092	; 0xffc
 8000622:	4838      	ldr	r0, [pc, #224]	; (8000704 <FSMModificationModeRun+0x2ec>)
 8000624:	f001 fa5f 	bl	8001ae6 <HAL_GPIO_WritePin>
			                          |GREEN_LED_Pin|YELLOW_LED_Pin|EN0_Pin|EN1_Pin
			                          |EN2_Pin|EN3_Pin, SET);
			HAL_GPIO_WritePin(GPIOB, A_LED_Pin|B_LED_Pin|C_LED_Pin|D_LED_Pin
 8000628:	2201      	movs	r2, #1
 800062a:	217f      	movs	r1, #127	; 0x7f
 800062c:	4836      	ldr	r0, [pc, #216]	; (8000708 <FSMModificationModeRun+0x2f0>)
 800062e:	f001 fa5a 	bl	8001ae6 <HAL_GPIO_WritePin>
			                          |E_LED_Pin|F_LED_Pin|G_LED_Pin, SET);
			count = 0;
 8000632:	4b36      	ldr	r3, [pc, #216]	; (800070c <FSMModificationModeRun+0x2f4>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
			yellow_time = 1;
 8000638:	4b39      	ldr	r3, [pc, #228]	; (8000720 <FSMModificationModeRun+0x308>)
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
			setLedBuffer(yellow_time, 2);
 800063e:	4b38      	ldr	r3, [pc, #224]	; (8000720 <FSMModificationModeRun+0x308>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fbed 	bl	8000e24 <setLedBuffer>
			status = MODIFY_TIME_YELLOW;
 800064a:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <FSMModificationModeRun+0x2e8>)
 800064c:	222c      	movs	r2, #44	; 0x2c
 800064e:	601a      	str	r2, [r3, #0]

			isButton1Pressed(); // reset button1_flag
 8000650:	f000 fa30 	bl	8000ab4 <isButton1Pressed>
			isButton2Pressed();
 8000654:	f000 fa4c 	bl	8000af0 <isButton2Pressed>
			isButton3Pressed();
 8000658:	f000 fa68 	bl	8000b2c <isButton3Pressed>
		}
		break;
 800065c:	e0ac      	b.n	80007b8 <FSMModificationModeRun+0x3a0>

	case MODIFY_GREEN:
		if(timer4_flag == 1)
 800065e:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <FSMModificationModeRun+0x300>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d11e      	bne.n	80006a4 <FSMModificationModeRun+0x28c>
		{
			setTimer4(25);
 8000666:	2019      	movs	r0, #25
 8000668:	f000 fe74 	bl	8001354 <setTimer4>

			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2120      	movs	r1, #32
 8000670:	4824      	ldr	r0, [pc, #144]	; (8000704 <FSMModificationModeRun+0x2ec>)
 8000672:	f001 fa38 	bl	8001ae6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2104      	movs	r1, #4
 800067a:	4822      	ldr	r0, [pc, #136]	; (8000704 <FSMModificationModeRun+0x2ec>)
 800067c:	f001 fa33 	bl	8001ae6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	481f      	ldr	r0, [pc, #124]	; (8000704 <FSMModificationModeRun+0x2ec>)
 8000686:	f001 fa2e 	bl	8001ae6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2110      	movs	r1, #16
 800068e:	481d      	ldr	r0, [pc, #116]	; (8000704 <FSMModificationModeRun+0x2ec>)
 8000690:	f001 fa29 	bl	8001ae6 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	481b      	ldr	r0, [pc, #108]	; (8000704 <FSMModificationModeRun+0x2ec>)
 8000698:	f001 fa3d 	bl	8001b16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin);
 800069c:	2108      	movs	r1, #8
 800069e:	4819      	ldr	r0, [pc, #100]	; (8000704 <FSMModificationModeRun+0x2ec>)
 80006a0:	f001 fa39 	bl	8001b16 <HAL_GPIO_TogglePin>
		}

		if(timer2_flag == 1)
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <FSMModificationModeRun+0x2fc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d113      	bne.n	80006d4 <FSMModificationModeRun+0x2bc>
		{
			setTimer2(scan_led_time);
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <FSMModificationModeRun+0x2f8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fe27 	bl	8001304 <setTimer2>
			if(count > 3)
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <FSMModificationModeRun+0x2f4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	dd02      	ble.n	80006c4 <FSMModificationModeRun+0x2ac>
			{
				count = 0;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <FSMModificationModeRun+0x2f4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
			}

			sevenSegDisplay(count++);
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <FSMModificationModeRun+0x2f4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	4910      	ldr	r1, [pc, #64]	; (800070c <FSMModificationModeRun+0x2f4>)
 80006cc:	600a      	str	r2, [r1, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fc10 	bl	8000ef4 <sevenSegDisplay>
		}

		if(isButton1Pressed() == 1)
 80006d4:	f000 f9ee 	bl	8000ab4 <isButton1Pressed>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d142      	bne.n	8000764 <FSMModificationModeRun+0x34c>
		{
			count = 0;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <FSMModificationModeRun+0x2f4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
			if(red_time == green_time+yellow_time)
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <FSMModificationModeRun+0x30c>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <FSMModificationModeRun+0x308>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	441a      	add	r2, r3
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <FSMModificationModeRun+0x304>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d118      	bne.n	8000728 <FSMModificationModeRun+0x310>
			{
				status = NORMAL_MODE;
 80006f6:	4b02      	ldr	r3, [pc, #8]	; (8000700 <FSMModificationModeRun+0x2e8>)
 80006f8:	2215      	movs	r2, #21
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	e032      	b.n	8000764 <FSMModificationModeRun+0x34c>
 80006fe:	bf00      	nop
 8000700:	20000088 	.word	0x20000088
 8000704:	40010800 	.word	0x40010800
 8000708:	40010c00 	.word	0x40010c00
 800070c:	20000084 	.word	0x20000084
 8000710:	08002b54 	.word	0x08002b54
 8000714:	200000a0 	.word	0x200000a0
 8000718:	200000a8 	.word	0x200000a8
 800071c:	20000044 	.word	0x20000044
 8000720:	2000004c 	.word	0x2000004c
 8000724:	20000048 	.word	0x20000048
			}
			else
			{
				if(red_time > green_time+yellow_time)
 8000728:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <FSMModificationModeRun+0x3ac>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <FSMModificationModeRun+0x3b0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	441a      	add	r2, r3
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <FSMModificationModeRun+0x3b4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	429a      	cmp	r2, r3
 8000738:	da0a      	bge.n	8000750 <FSMModificationModeRun+0x338>
				{
					green_time = red_time - yellow_time;
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <FSMModificationModeRun+0x3b4>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <FSMModificationModeRun+0x3b0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <FSMModificationModeRun+0x3ac>)
 8000746:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <FSMModificationModeRun+0x3b8>)
 800074a:	2215      	movs	r2, #21
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	e009      	b.n	8000764 <FSMModificationModeRun+0x34c>
				}
				else
				{
					red_time = green_time + yellow_time;
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <FSMModificationModeRun+0x3ac>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <FSMModificationModeRun+0x3b0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4413      	add	r3, r2
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <FSMModificationModeRun+0x3b4>)
 800075c:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <FSMModificationModeRun+0x3b8>)
 8000760:	2215      	movs	r2, #21
 8000762:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if(isButton2Pressed() == 1)
 8000764:	f000 f9c4 	bl	8000af0 <isButton2Pressed>
 8000768:	4603      	mov	r3, r0
 800076a:	2b01      	cmp	r3, #1
 800076c:	d126      	bne.n	80007bc <FSMModificationModeRun+0x3a4>
		{
			HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED_Pin
 800076e:	2201      	movs	r2, #1
 8000770:	f640 71fc 	movw	r1, #4092	; 0xffc
 8000774:	4817      	ldr	r0, [pc, #92]	; (80007d4 <FSMModificationModeRun+0x3bc>)
 8000776:	f001 f9b6 	bl	8001ae6 <HAL_GPIO_WritePin>
			                          |GREEN_LED_Pin|YELLOW_LED_Pin|EN0_Pin|EN1_Pin
			                          |EN2_Pin|EN3_Pin, SET);
			HAL_GPIO_WritePin(GPIOB, A_LED_Pin|B_LED_Pin|C_LED_Pin|D_LED_Pin
 800077a:	2201      	movs	r2, #1
 800077c:	217f      	movs	r1, #127	; 0x7f
 800077e:	4816      	ldr	r0, [pc, #88]	; (80007d8 <FSMModificationModeRun+0x3c0>)
 8000780:	f001 f9b1 	bl	8001ae6 <HAL_GPIO_WritePin>
			                          |E_LED_Pin|F_LED_Pin|G_LED_Pin, SET);
			count = 0;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <FSMModificationModeRun+0x3c4>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
			green_time = 1;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <FSMModificationModeRun+0x3ac>)
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
			setLedBuffer(green_time, 3);
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <FSMModificationModeRun+0x3ac>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2103      	movs	r1, #3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fb44 	bl	8000e24 <setLedBuffer>
			status = MODIFY_TIME_GREEN;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <FSMModificationModeRun+0x3b8>)
 800079e:	222b      	movs	r2, #43	; 0x2b
 80007a0:	601a      	str	r2, [r3, #0]

			isButton1Pressed(); // reset button1_flag
 80007a2:	f000 f987 	bl	8000ab4 <isButton1Pressed>
			isButton2Pressed();
 80007a6:	f000 f9a3 	bl	8000af0 <isButton2Pressed>
			isButton3Pressed();
 80007aa:	f000 f9bf 	bl	8000b2c <isButton3Pressed>
		}
		break;
 80007ae:	e005      	b.n	80007bc <FSMModificationModeRun+0x3a4>

	default:
		break;
 80007b0:	bf00      	nop
 80007b2:	e004      	b.n	80007be <FSMModificationModeRun+0x3a6>
		break;
 80007b4:	bf00      	nop
 80007b6:	e002      	b.n	80007be <FSMModificationModeRun+0x3a6>
		break;
 80007b8:	bf00      	nop
 80007ba:	e000      	b.n	80007be <FSMModificationModeRun+0x3a6>
		break;
 80007bc:	bf00      	nop
	}
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000048 	.word	0x20000048
 80007c8:	2000004c 	.word	0x2000004c
 80007cc:	20000044 	.word	0x20000044
 80007d0:	20000088 	.word	0x20000088
 80007d4:	40010800 	.word	0x40010800
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	20000084 	.word	0x20000084

080007e0 <FSMNormalModeRun>:
#include "FSMNormalMode.h"



void FSMNormalModeRun()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	switch(status)
 80007e4:	4ba9      	ldr	r3, [pc, #676]	; (8000a8c <FSMNormalModeRun+0x2ac>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3b15      	subs	r3, #21
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	f200 8142 	bhi.w	8000a74 <FSMNormalModeRun+0x294>
 80007f0:	a201      	add	r2, pc, #4	; (adr r2, 80007f8 <FSMNormalModeRun+0x18>)
 80007f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f6:	bf00      	nop
 80007f8:	0800080d 	.word	0x0800080d
 80007fc:	08000861 	.word	0x08000861
 8000800:	080008e7 	.word	0x080008e7
 8000804:	0800096d 	.word	0x0800096d
 8000808:	080009f1 	.word	0x080009f1
	{
	case NORMAL_MODE:
		HAL_GPIO_WritePin(GPIOA, RED_LED_Pin|GREEN_LED_Pin|YELLOW_LED_Pin|RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin, SET);
 800080c:	2201      	movs	r2, #1
 800080e:	21fc      	movs	r1, #252	; 0xfc
 8000810:	489f      	ldr	r0, [pc, #636]	; (8000a90 <FSMNormalModeRun+0x2b0>)
 8000812:	f001 f968 	bl	8001ae6 <HAL_GPIO_WritePin>
		count = 0;
 8000816:	4b9f      	ldr	r3, [pc, #636]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]

		status = RED0_GREEN1;
 800081c:	4b9b      	ldr	r3, [pc, #620]	; (8000a8c <FSMNormalModeRun+0x2ac>)
 800081e:	2216      	movs	r2, #22
 8000820:	601a      	str	r2, [r3, #0]
		setTimer1(green_time);
 8000822:	4b9d      	ldr	r3, [pc, #628]	; (8000a98 <FSMNormalModeRun+0x2b8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fd00 	bl	800122c <setTimer1>

		setLedBuffer(red_time, green_time); // set buffer for led 7 seg
 800082c:	4b9b      	ldr	r3, [pc, #620]	; (8000a9c <FSMNormalModeRun+0x2bc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a99      	ldr	r2, [pc, #612]	; (8000a98 <FSMNormalModeRun+0x2b8>)
 8000832:	6812      	ldr	r2, [r2, #0]
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f000 faf4 	bl	8000e24 <setLedBuffer>
		setTimer2(scan_led_time);
 800083c:	4b98      	ldr	r3, [pc, #608]	; (8000aa0 <FSMNormalModeRun+0x2c0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fd5f 	bl	8001304 <setTimer2>
		timer2_flag = 1; // ngay lap tuc chay led 7 doan
 8000846:	4b97      	ldr	r3, [pc, #604]	; (8000aa4 <FSMNormalModeRun+0x2c4>)
 8000848:	2201      	movs	r2, #1
 800084a:	601a      	str	r2, [r3, #0]
		setTimer3(100); // 1s sau update led_buffer
 800084c:	2064      	movs	r0, #100	; 0x64
 800084e:	f000 fd6d 	bl	800132c <setTimer3>

		isButton1Pressed(); // delete button1_flag
 8000852:	f000 f92f 	bl	8000ab4 <isButton1Pressed>
		isButton2Pressed();
 8000856:	f000 f94b 	bl	8000af0 <isButton2Pressed>
		isButton3Pressed();
 800085a:	f000 f967 	bl	8000b2c <isButton3Pressed>
		break;
 800085e:	e112      	b.n	8000a86 <FSMNormalModeRun+0x2a6>

	case RED0_GREEN1:
		setTrafficRed();
 8000860:	f000 fa5c 	bl	8000d1c <setTrafficRed>
		setTrafficGreen1();
 8000864:	f000 fab2 	bl	8000dcc <setTrafficGreen1>

		if(timer2_flag == 1)
 8000868:	4b8e      	ldr	r3, [pc, #568]	; (8000aa4 <FSMNormalModeRun+0x2c4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d113      	bne.n	8000898 <FSMNormalModeRun+0xb8>
		{
			setTimer2(scan_led_time);
 8000870:	4b8b      	ldr	r3, [pc, #556]	; (8000aa0 <FSMNormalModeRun+0x2c0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fd45 	bl	8001304 <setTimer2>
			if(count > 3)
 800087a:	4b86      	ldr	r3, [pc, #536]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b03      	cmp	r3, #3
 8000880:	dd02      	ble.n	8000888 <FSMNormalModeRun+0xa8>
			{
				count = 0;
 8000882:	4b84      	ldr	r3, [pc, #528]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
			}

			sevenSegDisplay(count++);
 8000888:	4b82      	ldr	r3, [pc, #520]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	4981      	ldr	r1, [pc, #516]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 8000890:	600a      	str	r2, [r1, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fb2e 	bl	8000ef4 <sevenSegDisplay>
		}

		if(timer3_flag == 1)
 8000898:	4b83      	ldr	r3, [pc, #524]	; (8000aa8 <FSMNormalModeRun+0x2c8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d104      	bne.n	80008aa <FSMNormalModeRun+0xca>
		{
			updateLedBuffer();
 80008a0:	f000 fafc 	bl	8000e9c <updateLedBuffer>
			setTimer3(100);
 80008a4:	2064      	movs	r0, #100	; 0x64
 80008a6:	f000 fd41 	bl	800132c <setTimer3>
		}

		if(timer1_flag == 1)
 80008aa:	4b80      	ldr	r3, [pc, #512]	; (8000aac <FSMNormalModeRun+0x2cc>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d10f      	bne.n	80008d2 <FSMNormalModeRun+0xf2>
		{
			setTimer1(yellow_time);
 80008b2:	4b7f      	ldr	r3, [pc, #508]	; (8000ab0 <FSMNormalModeRun+0x2d0>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fcb8 	bl	800122c <setTimer1>
			status = RED0_YELLOW1;
 80008bc:	4b73      	ldr	r3, [pc, #460]	; (8000a8c <FSMNormalModeRun+0x2ac>)
 80008be:	2217      	movs	r2, #23
 80008c0:	601a      	str	r2, [r3, #0]

			setLedBuffer(yellow_time, yellow_time); // set buffer for led 7 seg
 80008c2:	4b7b      	ldr	r3, [pc, #492]	; (8000ab0 <FSMNormalModeRun+0x2d0>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a7a      	ldr	r2, [pc, #488]	; (8000ab0 <FSMNormalModeRun+0x2d0>)
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 faa9 	bl	8000e24 <setLedBuffer>

		}

		if(isButton1Pressed() == 1)
 80008d2:	f000 f8ef 	bl	8000ab4 <isButton1Pressed>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	f040 80cd 	bne.w	8000a78 <FSMNormalModeRun+0x298>
		{
			status = MODIFICATION_MODE;
 80008de:	4b6b      	ldr	r3, [pc, #428]	; (8000a8c <FSMNormalModeRun+0x2ac>)
 80008e0:	221f      	movs	r2, #31
 80008e2:	601a      	str	r2, [r3, #0]
		}
		break;
 80008e4:	e0c8      	b.n	8000a78 <FSMNormalModeRun+0x298>

	case RED0_YELLOW1:
		setTrafficRed();
 80008e6:	f000 fa19 	bl	8000d1c <setTrafficRed>
		setTrafficYellow1();
 80008ea:	f000 fa85 	bl	8000df8 <setTrafficYellow1>

		if(timer2_flag == 1)
 80008ee:	4b6d      	ldr	r3, [pc, #436]	; (8000aa4 <FSMNormalModeRun+0x2c4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d113      	bne.n	800091e <FSMNormalModeRun+0x13e>
		{
			if(count > 3)
 80008f6:	4b67      	ldr	r3, [pc, #412]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	dd02      	ble.n	8000904 <FSMNormalModeRun+0x124>
			{
				count = 0;
 80008fe:	4b65      	ldr	r3, [pc, #404]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
			}

			sevenSegDisplay(count++);
 8000904:	4b63      	ldr	r3, [pc, #396]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	4962      	ldr	r1, [pc, #392]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 800090c:	600a      	str	r2, [r1, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f000 faf0 	bl	8000ef4 <sevenSegDisplay>
			setTimer2(scan_led_time);
 8000914:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <FSMNormalModeRun+0x2c0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fcf3 	bl	8001304 <setTimer2>
		}

		if(timer3_flag == 1)
 800091e:	4b62      	ldr	r3, [pc, #392]	; (8000aa8 <FSMNormalModeRun+0x2c8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d104      	bne.n	8000930 <FSMNormalModeRun+0x150>
		{
			updateLedBuffer();
 8000926:	f000 fab9 	bl	8000e9c <updateLedBuffer>
			setTimer3(100);
 800092a:	2064      	movs	r0, #100	; 0x64
 800092c:	f000 fcfe 	bl	800132c <setTimer3>
		}

		if(timer1_flag == 1)
 8000930:	4b5e      	ldr	r3, [pc, #376]	; (8000aac <FSMNormalModeRun+0x2cc>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d10f      	bne.n	8000958 <FSMNormalModeRun+0x178>
		{
			setTimer1(green_time);
 8000938:	4b57      	ldr	r3, [pc, #348]	; (8000a98 <FSMNormalModeRun+0x2b8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fc75 	bl	800122c <setTimer1>
			status = GREEN0_RED1;
 8000942:	4b52      	ldr	r3, [pc, #328]	; (8000a8c <FSMNormalModeRun+0x2ac>)
 8000944:	2218      	movs	r2, #24
 8000946:	601a      	str	r2, [r3, #0]

			setLedBuffer(green_time, red_time); // set buffer for led 7 seg
 8000948:	4b53      	ldr	r3, [pc, #332]	; (8000a98 <FSMNormalModeRun+0x2b8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a53      	ldr	r2, [pc, #332]	; (8000a9c <FSMNormalModeRun+0x2bc>)
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fa66 	bl	8000e24 <setLedBuffer>
		}

		if(isButton1Pressed() == 1)
 8000958:	f000 f8ac 	bl	8000ab4 <isButton1Pressed>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	f040 808c 	bne.w	8000a7c <FSMNormalModeRun+0x29c>
		{
			status = MODIFICATION_MODE;
 8000964:	4b49      	ldr	r3, [pc, #292]	; (8000a8c <FSMNormalModeRun+0x2ac>)
 8000966:	221f      	movs	r2, #31
 8000968:	601a      	str	r2, [r3, #0]
		}
		break;
 800096a:	e087      	b.n	8000a7c <FSMNormalModeRun+0x29c>

	case GREEN0_RED1:
		setTrafficGreen();
 800096c:	f000 f9ec 	bl	8000d48 <setTrafficGreen>
		setTrafficRed1();
 8000970:	f000 fa16 	bl	8000da0 <setTrafficRed1>

		//set led 7 seg
		if(timer2_flag == 1)
 8000974:	4b4b      	ldr	r3, [pc, #300]	; (8000aa4 <FSMNormalModeRun+0x2c4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d113      	bne.n	80009a4 <FSMNormalModeRun+0x1c4>
		{
			if(count > 3)
 800097c:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b03      	cmp	r3, #3
 8000982:	dd02      	ble.n	800098a <FSMNormalModeRun+0x1aa>
			{
				count = 0;
 8000984:	4b43      	ldr	r3, [pc, #268]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
			}

			sevenSegDisplay(count++);
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	4940      	ldr	r1, [pc, #256]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 8000992:	600a      	str	r2, [r1, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 faad 	bl	8000ef4 <sevenSegDisplay>
			setTimer2(scan_led_time);
 800099a:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <FSMNormalModeRun+0x2c0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fcb0 	bl	8001304 <setTimer2>
		}

		if(timer3_flag == 1)
 80009a4:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <FSMNormalModeRun+0x2c8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d104      	bne.n	80009b6 <FSMNormalModeRun+0x1d6>
		{
			updateLedBuffer();
 80009ac:	f000 fa76 	bl	8000e9c <updateLedBuffer>
			setTimer3(100);
 80009b0:	2064      	movs	r0, #100	; 0x64
 80009b2:	f000 fcbb 	bl	800132c <setTimer3>
		}

		if(timer1_flag==1)
 80009b6:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <FSMNormalModeRun+0x2cc>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d10f      	bne.n	80009de <FSMNormalModeRun+0x1fe>
		{
			setTimer1(yellow_time);
 80009be:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <FSMNormalModeRun+0x2d0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fc32 	bl	800122c <setTimer1>
			status = YELLOW0_RED1;
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <FSMNormalModeRun+0x2ac>)
 80009ca:	2219      	movs	r2, #25
 80009cc:	601a      	str	r2, [r3, #0]

			setLedBuffer(yellow_time, yellow_time); // set buffer for led 7 seg
 80009ce:	4b38      	ldr	r3, [pc, #224]	; (8000ab0 <FSMNormalModeRun+0x2d0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a37      	ldr	r2, [pc, #220]	; (8000ab0 <FSMNormalModeRun+0x2d0>)
 80009d4:	6812      	ldr	r2, [r2, #0]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fa23 	bl	8000e24 <setLedBuffer>
		}

		if(isButton1Pressed() == 1)
 80009de:	f000 f869 	bl	8000ab4 <isButton1Pressed>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d14b      	bne.n	8000a80 <FSMNormalModeRun+0x2a0>
		{
			status = MODIFICATION_MODE;
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <FSMNormalModeRun+0x2ac>)
 80009ea:	221f      	movs	r2, #31
 80009ec:	601a      	str	r2, [r3, #0]
		}
		break;
 80009ee:	e047      	b.n	8000a80 <FSMNormalModeRun+0x2a0>

	case YELLOW0_RED1:
		setTrafficYellow();
 80009f0:	f000 f9c0 	bl	8000d74 <setTrafficYellow>
		setTrafficRed1();
 80009f4:	f000 f9d4 	bl	8000da0 <setTrafficRed1>

		if(timer2_flag == 1)
 80009f8:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <FSMNormalModeRun+0x2c4>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d113      	bne.n	8000a28 <FSMNormalModeRun+0x248>
		{
			if(count > 3)
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	dd02      	ble.n	8000a0e <FSMNormalModeRun+0x22e>
			{
				count = 0;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
			}

			sevenSegDisplay(count++);
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	491f      	ldr	r1, [pc, #124]	; (8000a94 <FSMNormalModeRun+0x2b4>)
 8000a16:	600a      	str	r2, [r1, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 fa6b 	bl	8000ef4 <sevenSegDisplay>
			setTimer2(scan_led_time);
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <FSMNormalModeRun+0x2c0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fc6e 	bl	8001304 <setTimer2>
		}

		if(timer3_flag == 1)
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <FSMNormalModeRun+0x2c8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d104      	bne.n	8000a3a <FSMNormalModeRun+0x25a>
		{
			updateLedBuffer();
 8000a30:	f000 fa34 	bl	8000e9c <updateLedBuffer>
			setTimer3(100);
 8000a34:	2064      	movs	r0, #100	; 0x64
 8000a36:	f000 fc79 	bl	800132c <setTimer3>
		}

		if(timer1_flag == 1)
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <FSMNormalModeRun+0x2cc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d10f      	bne.n	8000a62 <FSMNormalModeRun+0x282>
		{
			setTimer1(green_time);
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <FSMNormalModeRun+0x2b8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fbf0 	bl	800122c <setTimer1>
			status = RED0_GREEN1;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <FSMNormalModeRun+0x2ac>)
 8000a4e:	2216      	movs	r2, #22
 8000a50:	601a      	str	r2, [r3, #0]

			setLedBuffer(red_time, green_time); // set buffer for led 7 seg
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <FSMNormalModeRun+0x2bc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <FSMNormalModeRun+0x2b8>)
 8000a58:	6812      	ldr	r2, [r2, #0]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f9e1 	bl	8000e24 <setLedBuffer>
		}
		if(isButton1Pressed() == 1)
 8000a62:	f000 f827 	bl	8000ab4 <isButton1Pressed>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d10b      	bne.n	8000a84 <FSMNormalModeRun+0x2a4>
		{
			status = MODIFICATION_MODE;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <FSMNormalModeRun+0x2ac>)
 8000a6e:	221f      	movs	r2, #31
 8000a70:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a72:	e007      	b.n	8000a84 <FSMNormalModeRun+0x2a4>

	default:
		break;
 8000a74:	bf00      	nop
 8000a76:	e006      	b.n	8000a86 <FSMNormalModeRun+0x2a6>
		break;
 8000a78:	bf00      	nop
 8000a7a:	e004      	b.n	8000a86 <FSMNormalModeRun+0x2a6>
		break;
 8000a7c:	bf00      	nop
 8000a7e:	e002      	b.n	8000a86 <FSMNormalModeRun+0x2a6>
		break;
 8000a80:	bf00      	nop
 8000a82:	e000      	b.n	8000a86 <FSMNormalModeRun+0x2a6>
		break;
 8000a84:	bf00      	nop
	}
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000088 	.word	0x20000088
 8000a90:	40010800 	.word	0x40010800
 8000a94:	20000084 	.word	0x20000084
 8000a98:	20000048 	.word	0x20000048
 8000a9c:	20000044 	.word	0x20000044
 8000aa0:	08002b54 	.word	0x08002b54
 8000aa4:	200000a0 	.word	0x200000a0
 8000aa8:	200000a4 	.word	0x200000a4
 8000aac:	2000009c 	.word	0x2000009c
 8000ab0:	2000004c 	.word	0x2000004c

08000ab4 <isButton1Pressed>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
// PROCESS BUTTON 1 FUNCTION
int isButton1Pressed() // n·∫øu n√∫t ƒë∆∞·ª£c nh·∫•n th√¨ h√†m tr·∫£ v·ªÅ 1
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <isButton1Pressed+0x20>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d104      	bne.n	8000aca <isButton1Pressed+0x16>
		button1_flag = 0;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <isButton1Pressed+0x20>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
		return 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <isButton1Pressed+0x18>
	}
	else return 0;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000078 	.word	0x20000078

08000ad8 <flag1Process>:
void flag1Process() // h√†m n√†y ch·ªâ ƒë·ªÅ set c·ªù khi m√† n√∫t ƒë∆∞·ª£c nh·∫•n
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	button1_flag = 1; // set flag ƒë·ªÉ x·ª≠ l√Ω tr√™n while(1)
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <flag1Process+0x14>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000078 	.word	0x20000078

08000af0 <isButton2Pressed>:

// PROCESS BUTTON 2 FUNCTION
int isButton2Pressed()
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <isButton2Pressed+0x20>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d104      	bne.n	8000b06 <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <isButton2Pressed+0x20>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
		return 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <isButton2Pressed+0x18>
	}
	else return 0;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	2000007c 	.word	0x2000007c

08000b14 <flag2Process>:
void flag2Process()
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <flag2Process+0x14>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	601a      	str	r2, [r3, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2000007c 	.word	0x2000007c

08000b2c <isButton3Pressed>:

//PROCESS BUTTON 3 FUNCTION
int isButton3Pressed()
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <isButton3Pressed+0x20>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d104      	bne.n	8000b42 <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <isButton3Pressed+0x20>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
		return 1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e000      	b.n	8000b44 <isButton3Pressed+0x18>
	}
	else return 0;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000080 	.word	0x20000080

08000b50 <flag3Process>:
void flag3Process()
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <flag3Process+0x14>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000080 	.word	0x20000080

08000b68 <getKeyInput>:

void getKeyInput()  //goi = timer moi 10ms 1 lan
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	key1_reg0 = key1_reg1;
 8000b6c:	4b5c      	ldr	r3, [pc, #368]	; (8000ce0 <getKeyInput+0x178>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a5c      	ldr	r2, [pc, #368]	; (8000ce4 <getKeyInput+0x17c>)
 8000b72:	6013      	str	r3, [r2, #0]
	key1_reg1 = key1_reg2;
 8000b74:	4b5c      	ldr	r3, [pc, #368]	; (8000ce8 <getKeyInput+0x180>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a59      	ldr	r2, [pc, #356]	; (8000ce0 <getKeyInput+0x178>)
 8000b7a:	6013      	str	r3, [r2, #0]
	key1_reg2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin); // key1_reg2 ƒë·ªçc gi√° tr·ªã c·ªßa n√∫t nh·∫•n
 8000b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b80:	485a      	ldr	r0, [pc, #360]	; (8000cec <getKeyInput+0x184>)
 8000b82:	f000 ff99 	bl	8001ab8 <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b57      	ldr	r3, [pc, #348]	; (8000ce8 <getKeyInput+0x180>)
 8000b8c:	601a      	str	r2, [r3, #0]
	if((key1_reg0 == key1_reg1) && (key1_reg1 == key1_reg2)) // ch·ªëng rung
 8000b8e:	4b55      	ldr	r3, [pc, #340]	; (8000ce4 <getKeyInput+0x17c>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <getKeyInput+0x178>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d125      	bne.n	8000be6 <getKeyInput+0x7e>
 8000b9a:	4b51      	ldr	r3, [pc, #324]	; (8000ce0 <getKeyInput+0x178>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4b52      	ldr	r3, [pc, #328]	; (8000ce8 <getKeyInput+0x180>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d11f      	bne.n	8000be6 <getKeyInput+0x7e>
	{
		if(key1_reg3 != key1_reg2) // x·ª≠ l√Ω khi nh·∫•n
 8000ba6:	4b52      	ldr	r3, [pc, #328]	; (8000cf0 <getKeyInput+0x188>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4b4f      	ldr	r3, [pc, #316]	; (8000ce8 <getKeyInput+0x180>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d00d      	beq.n	8000bce <getKeyInput+0x66>
		{
			key1_reg3 = key1_reg2;
 8000bb2:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <getKeyInput+0x180>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a4e      	ldr	r2, [pc, #312]	; (8000cf0 <getKeyInput+0x188>)
 8000bb8:	6013      	str	r3, [r2, #0]
			if(key1_reg2 == PRESSED_STATE)
 8000bba:	4b4b      	ldr	r3, [pc, #300]	; (8000ce8 <getKeyInput+0x180>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d111      	bne.n	8000be6 <getKeyInput+0x7e>
			{
				flag1Process();
 8000bc2:	f7ff ff89 	bl	8000ad8 <flag1Process>
				timer_for_key_press = 200; // g√°n l·∫°i l√™n 2s
 8000bc6:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <getKeyInput+0x18c>)
 8000bc8:	22c8      	movs	r2, #200	; 0xc8
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	e00b      	b.n	8000be6 <getKeyInput+0x7e>
			}
		}
		else // x·ª≠ l√Ω nh·∫•n ƒë√® (key1_reg3 == key1_reg2)
		{
			timer_for_key_press--;
 8000bce:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <getKeyInput+0x18c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	4a47      	ldr	r2, [pc, #284]	; (8000cf4 <getKeyInput+0x18c>)
 8000bd6:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 8000bd8:	4b46      	ldr	r3, [pc, #280]	; (8000cf4 <getKeyInput+0x18c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <getKeyInput+0x7e>
			{
				key1_reg3 = NORMAL_STATE; // g√°n key1_reg3 th√†nh NORMAL_STATE s·∫Ω reset tr∆∞·ªùng h·ª£p nh·∫•n ƒë√® l√™n l·∫°i tr∆∞·ªùng h·ª£p nh·∫•n
 8000be0:	4b43      	ldr	r3, [pc, #268]	; (8000cf0 <getKeyInput+0x188>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
			}
		}
	}

	key2_reg0 = key2_reg1;
 8000be6:	4b44      	ldr	r3, [pc, #272]	; (8000cf8 <getKeyInput+0x190>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a44      	ldr	r2, [pc, #272]	; (8000cfc <getKeyInput+0x194>)
 8000bec:	6013      	str	r3, [r2, #0]
	key2_reg1 = key2_reg2;
 8000bee:	4b44      	ldr	r3, [pc, #272]	; (8000d00 <getKeyInput+0x198>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a41      	ldr	r2, [pc, #260]	; (8000cf8 <getKeyInput+0x190>)
 8000bf4:	6013      	str	r3, [r2, #0]
	key2_reg2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000bf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfa:	4842      	ldr	r0, [pc, #264]	; (8000d04 <getKeyInput+0x19c>)
 8000bfc:	f000 ff5c 	bl	8001ab8 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b3e      	ldr	r3, [pc, #248]	; (8000d00 <getKeyInput+0x198>)
 8000c06:	601a      	str	r2, [r3, #0]
	if(key2_reg0 == key2_reg1 && key2_reg1 == key2_reg2)
 8000c08:	4b3c      	ldr	r3, [pc, #240]	; (8000cfc <getKeyInput+0x194>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <getKeyInput+0x190>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d125      	bne.n	8000c60 <getKeyInput+0xf8>
 8000c14:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <getKeyInput+0x190>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b39      	ldr	r3, [pc, #228]	; (8000d00 <getKeyInput+0x198>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d11f      	bne.n	8000c60 <getKeyInput+0xf8>
	{
		if(key2_reg3 != key2_reg2)
 8000c20:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <getKeyInput+0x1a0>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <getKeyInput+0x198>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d00d      	beq.n	8000c48 <getKeyInput+0xe0>
		{
			key2_reg3 = key2_reg2;
 8000c2c:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <getKeyInput+0x198>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a35      	ldr	r2, [pc, #212]	; (8000d08 <getKeyInput+0x1a0>)
 8000c32:	6013      	str	r3, [r2, #0]
			if(key2_reg2 == PRESSED_STATE)
 8000c34:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <getKeyInput+0x198>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d111      	bne.n	8000c60 <getKeyInput+0xf8>
			{
				flag2Process();
 8000c3c:	f7ff ff6a 	bl	8000b14 <flag2Process>
				timer_for_key_press = 200;
 8000c40:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <getKeyInput+0x18c>)
 8000c42:	22c8      	movs	r2, #200	; 0xc8
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e00b      	b.n	8000c60 <getKeyInput+0xf8>
			}
		}
		else
		{
			timer_for_key_press--;
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <getKeyInput+0x18c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <getKeyInput+0x18c>)
 8000c50:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 8000c52:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <getKeyInput+0x18c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d102      	bne.n	8000c60 <getKeyInput+0xf8>
			{
				key2_reg3 = NORMAL_STATE;
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <getKeyInput+0x1a0>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	key3_reg0 = key3_reg1;
 8000c60:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <getKeyInput+0x1a4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <getKeyInput+0x1a8>)
 8000c66:	6013      	str	r3, [r2, #0]
	key3_reg1 = key3_reg2;
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <getKeyInput+0x1ac>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <getKeyInput+0x1a4>)
 8000c6e:	6013      	str	r3, [r2, #0]
	key3_reg2 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c74:	4823      	ldr	r0, [pc, #140]	; (8000d04 <getKeyInput+0x19c>)
 8000c76:	f000 ff1f 	bl	8001ab8 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <getKeyInput+0x1ac>)
 8000c80:	601a      	str	r2, [r3, #0]
	if(key3_reg0 == key3_reg1 && key3_reg1 == key3_reg2)
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <getKeyInput+0x1a8>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <getKeyInput+0x1a4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d125      	bne.n	8000cda <getKeyInput+0x172>
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <getKeyInput+0x1a4>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <getKeyInput+0x1ac>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d11f      	bne.n	8000cda <getKeyInput+0x172>
	{
		if(key3_reg2 != key3_reg3)
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <getKeyInput+0x1ac>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <getKeyInput+0x1b0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d00d      	beq.n	8000cc2 <getKeyInput+0x15a>
		{
			key3_reg3 = key3_reg2;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <getKeyInput+0x1ac>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <getKeyInput+0x1b0>)
 8000cac:	6013      	str	r3, [r2, #0]
			if(key3_reg2 == PRESSED_STATE)
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <getKeyInput+0x1ac>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d111      	bne.n	8000cda <getKeyInput+0x172>
			{
				flag3Process();
 8000cb6:	f7ff ff4b 	bl	8000b50 <flag3Process>
				timer_for_key_press = 200;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <getKeyInput+0x18c>)
 8000cbc:	22c8      	movs	r2, #200	; 0xc8
 8000cbe:	601a      	str	r2, [r3, #0]
			{
				key3_reg3 = NORMAL_STATE;
			}
		}
	}
}
 8000cc0:	e00b      	b.n	8000cda <getKeyInput+0x172>
			timer_for_key_press--;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <getKeyInput+0x18c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <getKeyInput+0x18c>)
 8000cca:	6013      	str	r3, [r2, #0]
			if(timer_for_key_press == 0)
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <getKeyInput+0x18c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <getKeyInput+0x172>
				key3_reg3 = NORMAL_STATE;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <getKeyInput+0x1b0>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	2000000c 	.word	0x2000000c
 8000cf4:	20000030 	.word	0x20000030
 8000cf8:	20000014 	.word	0x20000014
 8000cfc:	20000010 	.word	0x20000010
 8000d00:	20000018 	.word	0x20000018
 8000d04:	40010800 	.word	0x40010800
 8000d08:	2000001c 	.word	0x2000001c
 8000d0c:	20000024 	.word	0x20000024
 8000d10:	20000020 	.word	0x20000020
 8000d14:	20000028 	.word	0x20000028
 8000d18:	2000002c 	.word	0x2000002c

08000d1c <setTrafficRed>:
int green_time = 3;
int yellow_time = 2;

//SET TRAFFIC LIGHT FUNCTION
void setTrafficRed()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2120      	movs	r1, #32
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <setTrafficRed+0x28>)
 8000d26:	f000 fede 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <setTrafficRed+0x28>)
 8000d30:	f000 fed9 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <setTrafficRed+0x28>)
 8000d3a:	f000 fed4 	bl	8001ae6 <HAL_GPIO_WritePin>
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40010800 	.word	0x40010800

08000d48 <setTrafficGreen>:
void setTrafficGreen()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <setTrafficGreen+0x28>)
 8000d52:	f000 fec8 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2140      	movs	r1, #64	; 0x40
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <setTrafficGreen+0x28>)
 8000d5c:	f000 fec3 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <setTrafficGreen+0x28>)
 8000d66:	f000 febe 	bl	8001ae6 <HAL_GPIO_WritePin>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40010800 	.word	0x40010800

08000d74 <setTrafficYellow>:
void setTrafficYellow()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	4807      	ldr	r0, [pc, #28]	; (8000d9c <setTrafficYellow+0x28>)
 8000d7e:	f000 feb2 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2140      	movs	r1, #64	; 0x40
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <setTrafficYellow+0x28>)
 8000d88:	f000 fead 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <setTrafficYellow+0x28>)
 8000d92:	f000 fea8 	bl	8001ae6 <HAL_GPIO_WritePin>
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40010800 	.word	0x40010800

08000da0 <setTrafficRed1>:

void setTrafficRed1()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2104      	movs	r1, #4
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <setTrafficRed1+0x28>)
 8000daa:	f000 fe9c 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2108      	movs	r1, #8
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <setTrafficRed1+0x28>)
 8000db4:	f000 fe97 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2110      	movs	r1, #16
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <setTrafficRed1+0x28>)
 8000dbe:	f000 fe92 	bl	8001ae6 <HAL_GPIO_WritePin>
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40010800 	.word	0x40010800

08000dcc <setTrafficGreen1>:
void setTrafficGreen1()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	4807      	ldr	r0, [pc, #28]	; (8000df4 <setTrafficGreen1+0x28>)
 8000dd6:	f000 fe86 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2108      	movs	r1, #8
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <setTrafficGreen1+0x28>)
 8000de0:	f000 fe81 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2110      	movs	r1, #16
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <setTrafficGreen1+0x28>)
 8000dea:	f000 fe7c 	bl	8001ae6 <HAL_GPIO_WritePin>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010800 	.word	0x40010800

08000df8 <setTrafficYellow1>:
void setTrafficYellow1()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2104      	movs	r1, #4
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <setTrafficYellow1+0x28>)
 8000e02:	f000 fe70 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2108      	movs	r1, #8
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <setTrafficYellow1+0x28>)
 8000e0c:	f000 fe6b 	bl	8001ae6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2110      	movs	r1, #16
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <setTrafficYellow1+0x28>)
 8000e16:	f000 fe66 	bl	8001ae6 <HAL_GPIO_WritePin>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40010800 	.word	0x40010800

08000e24 <setLedBuffer>:

const int scan_led_time = 25;

int led_buffer[4] = {1, 2, 3, 4};
void setLedBuffer(int first_led_time, int second_led_time)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	led_buffer[0] = first_led_time / 10;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <setLedBuffer+0x70>)
 8000e32:	fb82 1203 	smull	r1, r2, r2, r3
 8000e36:	1092      	asrs	r2, r2, #2
 8000e38:	17db      	asrs	r3, r3, #31
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	4a16      	ldr	r2, [pc, #88]	; (8000e98 <setLedBuffer+0x74>)
 8000e3e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = first_led_time % 10;
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <setLedBuffer+0x70>)
 8000e44:	fb83 2301 	smull	r2, r3, r3, r1
 8000e48:	109a      	asrs	r2, r3, #2
 8000e4a:	17cb      	asrs	r3, r1, #31
 8000e4c:	1ad2      	subs	r2, r2, r3
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	1aca      	subs	r2, r1, r3
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <setLedBuffer+0x74>)
 8000e5a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = second_led_time / 10;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <setLedBuffer+0x70>)
 8000e60:	fb82 1203 	smull	r1, r2, r2, r3
 8000e64:	1092      	asrs	r2, r2, #2
 8000e66:	17db      	asrs	r3, r3, #31
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <setLedBuffer+0x74>)
 8000e6c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = second_led_time % 10;
 8000e6e:	6839      	ldr	r1, [r7, #0]
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <setLedBuffer+0x70>)
 8000e72:	fb83 2301 	smull	r2, r3, r3, r1
 8000e76:	109a      	asrs	r2, r3, #2
 8000e78:	17cb      	asrs	r3, r1, #31
 8000e7a:	1ad2      	subs	r2, r2, r3
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	1aca      	subs	r2, r1, r3
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <setLedBuffer+0x74>)
 8000e88:	60da      	str	r2, [r3, #12]
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	66666667 	.word	0x66666667
 8000e98:	20000034 	.word	0x20000034

08000e9c <updateLedBuffer>:

void updateLedBuffer()
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
	//TODO
	if(led_buffer[1] <= 0)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <updateLedBuffer+0x54>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	dc08      	bgt.n	8000eba <updateLedBuffer+0x1e>
	{
		led_buffer[0]--;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <updateLedBuffer+0x54>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <updateLedBuffer+0x54>)
 8000eb0:	6013      	str	r3, [r2, #0]
		led_buffer[1] = 9;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <updateLedBuffer+0x54>)
 8000eb4:	2209      	movs	r2, #9
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	e004      	b.n	8000ec4 <updateLedBuffer+0x28>
	}
	else
	{
		led_buffer[1]--;
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <updateLedBuffer+0x54>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <updateLedBuffer+0x54>)
 8000ec2:	6053      	str	r3, [r2, #4]
	}
	if(led_buffer[3] <= 0)
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <updateLedBuffer+0x54>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	dc08      	bgt.n	8000ede <updateLedBuffer+0x42>
	{
		led_buffer[2]--;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <updateLedBuffer+0x54>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <updateLedBuffer+0x54>)
 8000ed4:	6093      	str	r3, [r2, #8]
		led_buffer[3] = 9;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <updateLedBuffer+0x54>)
 8000ed8:	2209      	movs	r2, #9
 8000eda:	60da      	str	r2, [r3, #12]
	}
	else
	{
		led_buffer[3]--;
	}
}
 8000edc:	e004      	b.n	8000ee8 <updateLedBuffer+0x4c>
		led_buffer[3]--;
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <updateLedBuffer+0x54>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	4a02      	ldr	r2, [pc, #8]	; (8000ef0 <updateLedBuffer+0x54>)
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000034 	.word	0x20000034

08000ef4 <sevenSegDisplay>:


void sevenSegDisplay(int num)
{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	uint16_t LED7SEG[10] = {0x003F, 0x0006, 0x005B, 0x004F, 0x0066, 0x006D, 0x007D, 0x0007, 0x007F, 0x006F};
 8000efc:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <sevenSegDisplay+0xc4>)
 8000efe:	f107 040c 	add.w	r4, r7, #12
 8000f02:	461d      	mov	r5, r3
 8000f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	6023      	str	r3, [r4, #0]
	GPIOB->ODR = ~LED7SEG[led_buffer[num]];
 8000f0c:	4a2b      	ldr	r2, [pc, #172]	; (8000fbc <sevenSegDisplay+0xc8>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	f107 0220 	add.w	r2, r7, #32
 8000f1a:	4413      	add	r3, r2
 8000f1c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000f20:	43da      	mvns	r2, r3
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <sevenSegDisplay+0xcc>)
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d83f      	bhi.n	8000fac <sevenSegDisplay+0xb8>
 8000f2c:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <sevenSegDisplay+0x40>)
 8000f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f32:	bf00      	nop
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f5f 	.word	0x08000f5f
 8000f3c:	08000f79 	.word	0x08000f79
 8000f40:	08000f93 	.word	0x08000f93
	switch(num)
	{
	case 0:
		HAL_GPIO_WritePin(GPIOA,EN1_Pin|EN2_Pin|EN3_Pin, SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000f4a:	481e      	ldr	r0, [pc, #120]	; (8000fc4 <sevenSegDisplay+0xd0>)
 8000f4c:	f000 fdcb 	bl	8001ae6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f56:	481b      	ldr	r0, [pc, #108]	; (8000fc4 <sevenSegDisplay+0xd0>)
 8000f58:	f000 fdc5 	bl	8001ae6 <HAL_GPIO_WritePin>
		break;
 8000f5c:	e027      	b.n	8000fae <sevenSegDisplay+0xba>
	case 1:
		HAL_GPIO_WritePin(GPIOA,EN0_Pin|EN2_Pin|EN3_Pin, SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 8000f64:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <sevenSegDisplay+0xd0>)
 8000f66:	f000 fdbe 	bl	8001ae6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f70:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <sevenSegDisplay+0xd0>)
 8000f72:	f000 fdb8 	bl	8001ae6 <HAL_GPIO_WritePin>
		break;
 8000f76:	e01a      	b.n	8000fae <sevenSegDisplay+0xba>
	case 2:
		HAL_GPIO_WritePin(GPIOA,EN0_Pin|EN1_Pin|EN3_Pin, SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8000f7e:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <sevenSegDisplay+0xd0>)
 8000f80:	f000 fdb1 	bl	8001ae6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8a:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <sevenSegDisplay+0xd0>)
 8000f8c:	f000 fdab 	bl	8001ae6 <HAL_GPIO_WritePin>
		break;
 8000f90:	e00d      	b.n	8000fae <sevenSegDisplay+0xba>
	case 3:
		HAL_GPIO_WritePin(GPIOA,EN0_Pin|EN1_Pin|EN2_Pin, SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000f98:	480a      	ldr	r0, [pc, #40]	; (8000fc4 <sevenSegDisplay+0xd0>)
 8000f9a:	f000 fda4 	bl	8001ae6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <sevenSegDisplay+0xd0>)
 8000fa6:	f000 fd9e 	bl	8001ae6 <HAL_GPIO_WritePin>
		break;
 8000faa:	e000      	b.n	8000fae <sevenSegDisplay+0xba>
	default:

		break;
 8000fac:	bf00      	nop
	}
}
 8000fae:	bf00      	nop
 8000fb0:	3720      	adds	r7, #32
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	08002b40 	.word	0x08002b40
 8000fbc:	20000034 	.word	0x20000034
 8000fc0:	40010c00 	.word	0x40010c00
 8000fc4:	40010800 	.word	0x40010800

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fcc:	f000 fa8a 	bl	80014e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd0:	f000 f816 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd4:	f000 f89c 	bl	8001110 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fd8:	f000 f84e 	bl	8001078 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fdc:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <main+0x30>)
 8000fde:	f001 f9df 	bl	80023a0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = NORMAL_MODE;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <main+0x34>)
 8000fe4:	2215      	movs	r2, #21
 8000fe6:	601a      	str	r2, [r3, #0]
  {
//	  FSMAutomaticRun();
//	  FSMManualRun();


	  FSMNormalModeRun();
 8000fe8:	f7ff fbfa 	bl	80007e0 <FSMNormalModeRun>
	  FSMModificationModeRun();
 8000fec:	f7ff fa14 	bl	8000418 <FSMModificationModeRun>
	  FSMLightModification();
 8000ff0:	f7ff f8ac 	bl	800014c <FSMLightModification>
	  FSMNormalModeRun();
 8000ff4:	e7f8      	b.n	8000fe8 <main+0x20>
 8000ff6:	bf00      	nop
 8000ff8:	200000ac 	.word	0x200000ac
 8000ffc:	20000088 	.word	0x20000088

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b090      	sub	sp, #64	; 0x40
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0318 	add.w	r3, r7, #24
 800100a:	2228      	movs	r2, #40	; 0x28
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fd82 	bl	8002b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001026:	2301      	movs	r3, #1
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102a:	2310      	movs	r3, #16
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800102e:	2300      	movs	r3, #0
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 0318 	add.w	r3, r7, #24
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fd86 	bl	8001b48 <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001042:	f000 f8ed 	bl	8001220 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fff2 	bl	8002048 <HAL_RCC_ClockConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800106a:	f000 f8d9 	bl	8001220 <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	3740      	adds	r7, #64	; 0x40
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_TIM2_Init+0x94>)
 8001096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_TIM2_Init+0x94>)
 800109e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <MX_TIM2_Init+0x94>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_TIM2_Init+0x94>)
 80010ac:	2209      	movs	r2, #9
 80010ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <MX_TIM2_Init+0x94>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_TIM2_Init+0x94>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010bc:	4813      	ldr	r0, [pc, #76]	; (800110c <MX_TIM2_Init+0x94>)
 80010be:	f001 f91f 	bl	8002300 <HAL_TIM_Base_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010c8:	f000 f8aa 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	4619      	mov	r1, r3
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_TIM2_Init+0x94>)
 80010da:	f001 fab5 	bl	8002648 <HAL_TIM_ConfigClockSource>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010e4:	f000 f89c 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_TIM2_Init+0x94>)
 80010f6:	f001 fc81 	bl	80029fc <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001100:	f000 f88e 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000ac 	.word	0x200000ac

08001110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001124:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <MX_GPIO_Init+0xe8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a33      	ldr	r2, [pc, #204]	; (80011f8 <MX_GPIO_Init+0xe8>)
 800112a:	f043 0310 	orr.w	r3, r3, #16
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <MX_GPIO_Init+0xe8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <MX_GPIO_Init+0xe8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <MX_GPIO_Init+0xe8>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_GPIO_Init+0xe8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <MX_GPIO_Init+0xe8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <MX_GPIO_Init+0xe8>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <MX_GPIO_Init+0xe8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED_Pin
 800116c:	2200      	movs	r2, #0
 800116e:	f640 71fc 	movw	r1, #4092	; 0xffc
 8001172:	4822      	ldr	r0, [pc, #136]	; (80011fc <MX_GPIO_Init+0xec>)
 8001174:	f000 fcb7 	bl	8001ae6 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|YELLOW_LED_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_LED_Pin|B_LED_Pin|C_LED_Pin|D_LED_Pin
 8001178:	2200      	movs	r2, #0
 800117a:	217f      	movs	r1, #127	; 0x7f
 800117c:	4820      	ldr	r0, [pc, #128]	; (8001200 <MX_GPIO_Init+0xf0>)
 800117e:	f000 fcb2 	bl	8001ae6 <HAL_GPIO_WritePin>
                          |E_LED_Pin|F_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8001182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	481b      	ldr	r0, [pc, #108]	; (8001204 <MX_GPIO_Init+0xf4>)
 8001198:	f000 fb14 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED1_Pin GREEN_LED1_Pin YELLOW_LED1_Pin RED_LED_Pin
                           GREEN_LED_Pin YELLOW_LED_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED_Pin
 800119c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011a0:	613b      	str	r3, [r7, #16]
                          |GREEN_LED_Pin|YELLOW_LED_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4619      	mov	r1, r3
 80011b4:	4811      	ldr	r0, [pc, #68]	; (80011fc <MX_GPIO_Init+0xec>)
 80011b6:	f000 fb05 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_LED_Pin B_LED_Pin C_LED_Pin D_LED_Pin
                           E_LED_Pin F_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = A_LED_Pin|B_LED_Pin|C_LED_Pin|D_LED_Pin
 80011ba:	237f      	movs	r3, #127	; 0x7f
 80011bc:	613b      	str	r3, [r7, #16]
                          |E_LED_Pin|F_LED_Pin|G_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4619      	mov	r1, r3
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <MX_GPIO_Init+0xf0>)
 80011d2:	f000 faf7 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80011d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_GPIO_Init+0xec>)
 80011ec:	f000 faea 	bl	80017c4 <HAL_GPIO_Init>

}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800
 8001200:	40010c00 	.word	0x40010c00
 8001204:	40011000 	.word	0x40011000

08001208 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	timerRun(); 	// timer interupt function
 8001210:	f000 f822 	bl	8001258 <timerRun>
	getKeyInput();  // debouncing function
 8001214:	f7ff fca8 	bl	8000b68 <getKeyInput>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <setTimer1>:

int timer1_counter = 0;
int timer1_flag = 0;
// counter for trafic light (already divide for 100)
void setTimer1(int duration)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	timer1_counter = duration*100;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2264      	movs	r2, #100	; 0x64
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <setTimer1+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <setTimer1+0x28>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	2000008c 	.word	0x2000008c
 8001254:	2000009c 	.word	0x2000009c

08001258 <timerRun>:

void timerRun()
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <timerRun+0x8c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	dd0b      	ble.n	800127c <timerRun+0x24>
	{
		timer1_counter--;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <timerRun+0x8c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3b01      	subs	r3, #1
 800126a:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <timerRun+0x8c>)
 800126c:	6013      	str	r3, [r2, #0]

		if(timer1_counter <= 0)
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <timerRun+0x8c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	dc02      	bgt.n	800127c <timerRun+0x24>
		{
			timer1_flag = 1;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <timerRun+0x90>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0)
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <timerRun+0x94>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	dd0b      	ble.n	800129c <timerRun+0x44>
	{
		timer2_counter--;//counter led 7 segment
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <timerRun+0x94>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3b01      	subs	r3, #1
 800128a:	4a18      	ldr	r2, [pc, #96]	; (80012ec <timerRun+0x94>)
 800128c:	6013      	str	r3, [r2, #0]

		if(timer2_counter <= 0) // counter led 7 segment
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <timerRun+0x94>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	dc02      	bgt.n	800129c <timerRun+0x44>
		{
			timer2_flag = 1;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <timerRun+0x98>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0)
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <timerRun+0x9c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	dd0b      	ble.n	80012bc <timerRun+0x64>
	{
		timer3_counter--;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <timerRun+0x9c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <timerRun+0x9c>)
 80012ac:	6013      	str	r3, [r2, #0]

		if(timer3_counter <= 0)
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <timerRun+0x9c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	dc02      	bgt.n	80012bc <timerRun+0x64>
		{
			timer3_flag = 1;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <timerRun+0xa0>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0)
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <timerRun+0xa4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dd0b      	ble.n	80012dc <timerRun+0x84>
	{
		timer4_counter--;
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <timerRun+0xa4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <timerRun+0xa4>)
 80012cc:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <timerRun+0xa4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dc02      	bgt.n	80012dc <timerRun+0x84>
		{
			timer4_flag = 1;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <timerRun+0xa8>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
		}
	}

}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	2000008c 	.word	0x2000008c
 80012e8:	2000009c 	.word	0x2000009c
 80012ec:	20000090 	.word	0x20000090
 80012f0:	200000a0 	.word	0x200000a0
 80012f4:	20000094 	.word	0x20000094
 80012f8:	200000a4 	.word	0x200000a4
 80012fc:	20000098 	.word	0x20000098
 8001300:	200000a8 	.word	0x200000a8

08001304 <setTimer2>:
// counter for 7 led segment
int timer2_counter = 0;
int timer2_flag = 0;

void setTimer2(int duration2)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration2;
 800130c:	4a05      	ldr	r2, [pc, #20]	; (8001324 <setTimer2+0x20>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <setTimer2+0x24>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000090 	.word	0x20000090
 8001328:	200000a0 	.word	0x200000a0

0800132c <setTimer3>:

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer3(int duration3)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	timer3_counter = duration3;
 8001334:	4a05      	ldr	r2, [pc, #20]	; (800134c <setTimer3+0x20>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <setTimer3+0x24>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000094 	.word	0x20000094
 8001350:	200000a4 	.word	0x200000a4

08001354 <setTimer4>:

int timer4_counter = 0;
int timer4_flag = 0;

void setTimer4(int duration4)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration4;
 800135c:	4a05      	ldr	r2, [pc, #20]	; (8001374 <setTimer4+0x20>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <setTimer4+0x24>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000098 	.word	0x20000098
 8001378:	200000a8 	.word	0x200000a8

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_MspInit+0x5c>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_MspInit+0x5c>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_MspInit+0x5c>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_MspInit+0x5c>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_MspInit+0x5c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_MspInit+0x5c>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_MspInit+0x60>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_MspInit+0x60>)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000

080013e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f0:	d113      	bne.n	800141a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_TIM_Base_MspInit+0x44>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <HAL_TIM_Base_MspInit+0x44>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	61d3      	str	r3, [r2, #28]
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_TIM_Base_MspInit+0x44>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	201c      	movs	r0, #28
 8001410:	f000 f9a1 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001414:	201c      	movs	r0, #28
 8001416:	f000 f9ba 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800142c:	e7fe      	b.n	800142c <NMI_Handler+0x4>

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146e:	f000 f87f 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <TIM2_IRQHandler+0x10>)
 800147e:	f000 ffdb 	bl	8002438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200000ac 	.word	0x200000ac

0800148c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001498:	f7ff fff8 	bl	800148c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800149c:	480b      	ldr	r0, [pc, #44]	; (80014cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800149e:	490c      	ldr	r1, [pc, #48]	; (80014d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014b4:	4c09      	ldr	r4, [pc, #36]	; (80014dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c2:	f001 fb05 	bl	8002ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c6:	f7ff fd7f 	bl	8000fc8 <main>
  bx lr
 80014ca:	4770      	bx	lr
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014d4:	08002b84 	.word	0x08002b84
  ldr r2, =_sbss
 80014d8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014dc:	200000f8 	.word	0x200000f8

080014e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC1_2_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_Init+0x28>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_Init+0x28>)
 80014ee:	f043 0310 	orr.w	r3, r3, #16
 80014f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f4:	2003      	movs	r0, #3
 80014f6:	f000 f923 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fa:	200f      	movs	r0, #15
 80014fc:	f000 f808 	bl	8001510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001500:	f7ff ff3c 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40022000 	.word	0x40022000

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x54>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_InitTick+0x58>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	fbb3 f3f1 	udiv	r3, r3, r1
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f93b 	bl	80017aa <HAL_SYSTICK_Config>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00e      	b.n	800155c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d80a      	bhi.n	800155a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f000 f903 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_InitTick+0x5c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e000      	b.n	800155c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000050 	.word	0x20000050
 8001568:	20000058 	.word	0x20000058
 800156c:	20000054 	.word	0x20000054

08001570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_IncTick+0x1c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_IncTick+0x20>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a03      	ldr	r2, [pc, #12]	; (8001590 <HAL_IncTick+0x20>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	20000058 	.word	0x20000058
 8001590:	200000f4 	.word	0x200000f4

08001594 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <HAL_GetTick+0x10>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	200000f4 	.word	0x200000f4

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4906      	ldr	r1, [pc, #24]	; (8001640 <__NVIC_EnableIRQ+0x34>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff90 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff2d 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff42 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff90 	bl	8001698 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5f 	bl	8001644 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff35 	bl	800160c <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b08b      	sub	sp, #44	; 0x2c
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	e148      	b.n	8001a6a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d8:	2201      	movs	r2, #1
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f040 8137 	bne.w	8001a64 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4aa3      	ldr	r2, [pc, #652]	; (8001a88 <HAL_GPIO_Init+0x2c4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d05e      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001800:	4aa1      	ldr	r2, [pc, #644]	; (8001a88 <HAL_GPIO_Init+0x2c4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d875      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001806:	4aa1      	ldr	r2, [pc, #644]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d058      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 800180c:	4a9f      	ldr	r2, [pc, #636]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d86f      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001812:	4a9f      	ldr	r2, [pc, #636]	; (8001a90 <HAL_GPIO_Init+0x2cc>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d052      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001818:	4a9d      	ldr	r2, [pc, #628]	; (8001a90 <HAL_GPIO_Init+0x2cc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d869      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800181e:	4a9d      	ldr	r2, [pc, #628]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d04c      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001824:	4a9b      	ldr	r2, [pc, #620]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d863      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800182a:	4a9b      	ldr	r2, [pc, #620]	; (8001a98 <HAL_GPIO_Init+0x2d4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d046      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001830:	4a99      	ldr	r2, [pc, #612]	; (8001a98 <HAL_GPIO_Init+0x2d4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d85d      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001836:	2b12      	cmp	r3, #18
 8001838:	d82a      	bhi.n	8001890 <HAL_GPIO_Init+0xcc>
 800183a:	2b12      	cmp	r3, #18
 800183c:	d859      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <HAL_GPIO_Init+0x80>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	080018bf 	.word	0x080018bf
 8001848:	08001899 	.word	0x08001899
 800184c:	080018ab 	.word	0x080018ab
 8001850:	080018ed 	.word	0x080018ed
 8001854:	080018f3 	.word	0x080018f3
 8001858:	080018f3 	.word	0x080018f3
 800185c:	080018f3 	.word	0x080018f3
 8001860:	080018f3 	.word	0x080018f3
 8001864:	080018f3 	.word	0x080018f3
 8001868:	080018f3 	.word	0x080018f3
 800186c:	080018f3 	.word	0x080018f3
 8001870:	080018f3 	.word	0x080018f3
 8001874:	080018f3 	.word	0x080018f3
 8001878:	080018f3 	.word	0x080018f3
 800187c:	080018f3 	.word	0x080018f3
 8001880:	080018f3 	.word	0x080018f3
 8001884:	080018f3 	.word	0x080018f3
 8001888:	080018a1 	.word	0x080018a1
 800188c:	080018b5 	.word	0x080018b5
 8001890:	4a82      	ldr	r2, [pc, #520]	; (8001a9c <HAL_GPIO_Init+0x2d8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001896:	e02c      	b.n	80018f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e029      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	3304      	adds	r3, #4
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e024      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	3308      	adds	r3, #8
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e01f      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	330c      	adds	r3, #12
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e01a      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018c6:	2304      	movs	r3, #4
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e013      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	611a      	str	r2, [r3, #16]
          break;
 80018de:	e009      	b.n	80018f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e0:	2308      	movs	r3, #8
 80018e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	615a      	str	r2, [r3, #20]
          break;
 80018ea:	e003      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          break;
 80018f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d801      	bhi.n	80018fe <HAL_GPIO_Init+0x13a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_Init+0x13e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2bff      	cmp	r3, #255	; 0xff
 8001908:	d802      	bhi.n	8001910 <HAL_GPIO_Init+0x14c>
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	e002      	b.n	8001916 <HAL_GPIO_Init+0x152>
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	3b08      	subs	r3, #8
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	210f      	movs	r1, #15
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	6a39      	ldr	r1, [r7, #32]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8090 	beq.w	8001a64 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001944:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <HAL_GPIO_Init+0x2dc>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a55      	ldr	r2, [pc, #340]	; (8001aa0 <HAL_GPIO_Init+0x2dc>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_GPIO_Init+0x2dc>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800195c:	4a51      	ldr	r2, [pc, #324]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a49      	ldr	r2, [pc, #292]	; (8001aa8 <HAL_GPIO_Init+0x2e4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00d      	beq.n	80019a4 <HAL_GPIO_Init+0x1e0>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a48      	ldr	r2, [pc, #288]	; (8001aac <HAL_GPIO_Init+0x2e8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d007      	beq.n	80019a0 <HAL_GPIO_Init+0x1dc>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a47      	ldr	r2, [pc, #284]	; (8001ab0 <HAL_GPIO_Init+0x2ec>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_GPIO_Init+0x1d8>
 8001998:	2302      	movs	r3, #2
 800199a:	e004      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 800199c:	2303      	movs	r3, #3
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 80019a4:	2300      	movs	r3, #0
 80019a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a8:	f002 0203 	and.w	r2, r2, #3
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	4093      	lsls	r3, r2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b6:	493b      	ldr	r1, [pc, #236]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019d0:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	4937      	ldr	r1, [pc, #220]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019de:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4933      	ldr	r1, [pc, #204]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f8:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	492d      	ldr	r1, [pc, #180]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60cb      	str	r3, [r1, #12]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	4929      	ldr	r1, [pc, #164]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4923      	ldr	r1, [pc, #140]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	491f      	ldr	r1, [pc, #124]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4919      	ldr	r1, [pc, #100]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4915      	ldr	r1, [pc, #84]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	3301      	adds	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f47f aeaf 	bne.w	80017d8 <HAL_GPIO_Init+0x14>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
 8001a7e:	372c      	adds	r7, #44	; 0x2c
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	10320000 	.word	0x10320000
 8001a8c:	10310000 	.word	0x10310000
 8001a90:	10220000 	.word	0x10220000
 8001a94:	10210000 	.word	0x10210000
 8001a98:	10120000 	.word	0x10120000
 8001a9c:	10110000 	.word	0x10110000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	40010c00 	.word	0x40010c00
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e001      	b.n	8001ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	807b      	strh	r3, [r7, #2]
 8001af2:	4613      	mov	r3, r2
 8001af4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af6:	787b      	ldrb	r3, [r7, #1]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afc:	887a      	ldrh	r2, [r7, #2]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b02:	e003      	b.n	8001b0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	611a      	str	r2, [r3, #16]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b28:	887a      	ldrh	r2, [r7, #2]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	041a      	lsls	r2, r3, #16
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	400b      	ands	r3, r1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e26c      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8087 	beq.w	8001c76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b68:	4b92      	ldr	r3, [pc, #584]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d00c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b74:	4b8f      	ldr	r3, [pc, #572]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d112      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x5e>
 8001b80:	4b8c      	ldr	r3, [pc, #560]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8e:	4b89      	ldr	r3, [pc, #548]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d06c      	beq.n	8001c74 <HAL_RCC_OscConfig+0x12c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d168      	bne.n	8001c74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e246      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x76>
 8001bb0:	4b80      	ldr	r3, [pc, #512]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a7f      	ldr	r2, [pc, #508]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e02e      	b.n	8001c1c <HAL_RCC_OscConfig+0xd4>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x98>
 8001bc6:	4b7b      	ldr	r3, [pc, #492]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7a      	ldr	r2, [pc, #488]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b78      	ldr	r3, [pc, #480]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a77      	ldr	r2, [pc, #476]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e01d      	b.n	8001c1c <HAL_RCC_OscConfig+0xd4>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0xbc>
 8001bea:	4b72      	ldr	r3, [pc, #456]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a71      	ldr	r2, [pc, #452]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6e      	ldr	r2, [pc, #440]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0xd4>
 8001c04:	4b6b      	ldr	r3, [pc, #428]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a6a      	ldr	r2, [pc, #424]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a67      	ldr	r2, [pc, #412]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fcb6 	bl	8001594 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fcb2 	bl	8001594 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1fa      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4b5d      	ldr	r3, [pc, #372]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0xe4>
 8001c4a:	e014      	b.n	8001c76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fca2 	bl	8001594 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff fc9e 	bl	8001594 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	; 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e1e6      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x10c>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d063      	beq.n	8001d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c82:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00b      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c8e:	4b49      	ldr	r3, [pc, #292]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d11c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x18c>
 8001c9a:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d116      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	4b43      	ldr	r3, [pc, #268]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_RCC_OscConfig+0x176>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e1ba      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4939      	ldr	r1, [pc, #228]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	e03a      	b.n	8001d4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cdc:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fc57 	bl	8001594 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cea:	f7ff fc53 	bl	8001594 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e19b      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4927      	ldr	r1, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fc36 	bl	8001594 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fc32 	bl	8001594 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e17a      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d03a      	beq.n	8001dcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d019      	beq.n	8001d92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d64:	f7ff fc16 	bl	8001594 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fc12 	bl	8001594 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e15a      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f000 fa9a 	bl	80022c4 <RCC_Delay>
 8001d90:	e01c      	b.n	8001dcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7ff fbfc 	bl	8001594 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9e:	e00f      	b.n	8001dc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da0:	f7ff fbf8 	bl	8001594 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d908      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e140      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	42420000 	.word	0x42420000
 8001dbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc0:	4b9e      	ldr	r3, [pc, #632]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e9      	bne.n	8001da0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80a6 	beq.w	8001f26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dde:	4b97      	ldr	r3, [pc, #604]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10d      	bne.n	8001e06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	4b94      	ldr	r3, [pc, #592]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a93      	ldr	r2, [pc, #588]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df4:	61d3      	str	r3, [r2, #28]
 8001df6:	4b91      	ldr	r3, [pc, #580]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e02:	2301      	movs	r3, #1
 8001e04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e06:	4b8e      	ldr	r3, [pc, #568]	; (8002040 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d118      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e12:	4b8b      	ldr	r3, [pc, #556]	; (8002040 <HAL_RCC_OscConfig+0x4f8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a8a      	ldr	r2, [pc, #552]	; (8002040 <HAL_RCC_OscConfig+0x4f8>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1e:	f7ff fbb9 	bl	8001594 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e26:	f7ff fbb5 	bl	8001594 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b64      	cmp	r3, #100	; 0x64
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0fd      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	4b81      	ldr	r3, [pc, #516]	; (8002040 <HAL_RCC_OscConfig+0x4f8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x312>
 8001e4c:	4b7b      	ldr	r3, [pc, #492]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a7a      	ldr	r2, [pc, #488]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	e02d      	b.n	8001eb6 <HAL_RCC_OscConfig+0x36e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x334>
 8001e62:	4b76      	ldr	r3, [pc, #472]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a75      	ldr	r2, [pc, #468]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a72      	ldr	r2, [pc, #456]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	6213      	str	r3, [r2, #32]
 8001e7a:	e01c      	b.n	8001eb6 <HAL_RCC_OscConfig+0x36e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d10c      	bne.n	8001e9e <HAL_RCC_OscConfig+0x356>
 8001e84:	4b6d      	ldr	r3, [pc, #436]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a6c      	ldr	r2, [pc, #432]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4a69      	ldr	r2, [pc, #420]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6213      	str	r3, [r2, #32]
 8001e9c:	e00b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x36e>
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a66      	ldr	r2, [pc, #408]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	6213      	str	r3, [r2, #32]
 8001eaa:	4b64      	ldr	r3, [pc, #400]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4a63      	ldr	r2, [pc, #396]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d015      	beq.n	8001eea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fb69 	bl	8001594 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff fb65 	bl	8001594 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e0ab      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001edc:	4b57      	ldr	r3, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0ee      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x37e>
 8001ee8:	e014      	b.n	8001f14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fb53 	bl	8001594 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7ff fb4f 	bl	8001594 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e095      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f08:	4b4c      	ldr	r3, [pc, #304]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1ee      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d105      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1a:	4b48      	ldr	r3, [pc, #288]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a47      	ldr	r2, [pc, #284]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8081 	beq.w	8002032 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f30:	4b42      	ldr	r3, [pc, #264]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d061      	beq.n	8002000 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d146      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f44:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <HAL_RCC_OscConfig+0x4fc>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7ff fb23 	bl	8001594 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f52:	f7ff fb1f 	bl	8001594 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e067      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f0      	bne.n	8001f52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f78:	d108      	bne.n	8001f8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f7a:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	492d      	ldr	r1, [pc, #180]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a19      	ldr	r1, [r3, #32]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	4927      	ldr	r1, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_OscConfig+0x4fc>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff faf3 	bl	8001594 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff faef 	bl	8001594 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e037      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46a>
 8001fd0:	e02f      	b.n	8002032 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <HAL_RCC_OscConfig+0x4fc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fadc 	bl	8001594 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7ff fad8 	bl	8001594 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e020      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x498>
 8001ffe:	e018      	b.n	8002032 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e013      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_OscConfig+0x4f4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	429a      	cmp	r2, r3
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	40007000 	.word	0x40007000
 8002044:	42420060 	.word	0x42420060

08002048 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0d0      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d910      	bls.n	800208c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b67      	ldr	r3, [pc, #412]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4965      	ldr	r1, [pc, #404]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b63      	ldr	r3, [pc, #396]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0b8      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a4:	4b59      	ldr	r3, [pc, #356]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a58      	ldr	r2, [pc, #352]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020bc:	4b53      	ldr	r3, [pc, #332]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a52      	ldr	r2, [pc, #328]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b50      	ldr	r3, [pc, #320]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	494d      	ldr	r1, [pc, #308]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d040      	beq.n	8002168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b47      	ldr	r3, [pc, #284]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d115      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e07f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b41      	ldr	r3, [pc, #260]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e073      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b3d      	ldr	r3, [pc, #244]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06b      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002126:	4b39      	ldr	r3, [pc, #228]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f023 0203 	bic.w	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4936      	ldr	r1, [pc, #216]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7ff fa2c 	bl	8001594 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	e00a      	b.n	8002156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7ff fa28 	bl	8001594 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e053      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b2d      	ldr	r3, [pc, #180]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 020c 	and.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1eb      	bne.n	8002140 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d210      	bcs.n	8002198 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 0207 	bic.w	r2, r3, #7
 800217e:	4922      	ldr	r1, [pc, #136]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e032      	b.n	80021fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4916      	ldr	r1, [pc, #88]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	490e      	ldr	r1, [pc, #56]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021d6:	f000 f821 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021da:	4602      	mov	r2, r0
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	490a      	ldr	r1, [pc, #40]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021e8:	5ccb      	ldrb	r3, [r1, r3]
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x1cc>)
 80021f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCC_ClockConfig+0x1d0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f98a 	bl	8001510 <HAL_InitTick>

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40022000 	.word	0x40022000
 800220c:	40021000 	.word	0x40021000
 8002210:	08002b58 	.word	0x08002b58
 8002214:	20000050 	.word	0x20000050
 8002218:	20000054 	.word	0x20000054

0800221c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b04      	cmp	r3, #4
 8002244:	d002      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x30>
 8002246:	2b08      	cmp	r3, #8
 8002248:	d003      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x36>
 800224a:	e027      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800224e:	613b      	str	r3, [r7, #16]
      break;
 8002250:	e027      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	0c9b      	lsrs	r3, r3, #18
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800225c:	5cd3      	ldrb	r3, [r2, r3]
 800225e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d010      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	0c5b      	lsrs	r3, r3, #17
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002276:	5cd3      	ldrb	r3, [r2, r3]
 8002278:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800227e:	fb02 f203 	mul.w	r2, r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	fbb2 f3f3 	udiv	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e004      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	613b      	str	r3, [r7, #16]
      break;
 800229a:	e002      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800229e:	613b      	str	r3, [r7, #16]
      break;
 80022a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a2:	693b      	ldr	r3, [r7, #16]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	007a1200 	.word	0x007a1200
 80022b8:	08002b68 	.word	0x08002b68
 80022bc:	08002b78 	.word	0x08002b78
 80022c0:	003d0900 	.word	0x003d0900

080022c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <RCC_Delay+0x34>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <RCC_Delay+0x38>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0a5b      	lsrs	r3, r3, #9
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022e0:	bf00      	nop
  }
  while (Delay --);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1e5a      	subs	r2, r3, #1
 80022e6:	60fa      	str	r2, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f9      	bne.n	80022e0 <RCC_Delay+0x1c>
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	20000050 	.word	0x20000050
 80022fc:	10624dd3 	.word	0x10624dd3

08002300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e041      	b.n	8002396 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff f85a 	bl	80013e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3304      	adds	r3, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f000 fa6e 	bl	8002820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d001      	beq.n	80023b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e035      	b.n	8002424 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a16      	ldr	r2, [pc, #88]	; (8002430 <HAL_TIM_Base_Start_IT+0x90>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_TIM_Base_Start_IT+0x4e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e2:	d004      	beq.n	80023ee <HAL_TIM_Base_Start_IT+0x4e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <HAL_TIM_Base_Start_IT+0x94>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d111      	bne.n	8002412 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b06      	cmp	r3, #6
 80023fe:	d010      	beq.n	8002422 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002410:	e007      	b.n	8002422 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0201 	orr.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40012c00 	.word	0x40012c00
 8002434:	40000400 	.word	0x40000400

08002438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b02      	cmp	r3, #2
 800244c:	d122      	bne.n	8002494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d11b      	bne.n	8002494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0202 	mvn.w	r2, #2
 8002464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f9b4 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 8002480:	e005      	b.n	800248e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f9a7 	bl	80027d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f9b6 	bl	80027fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d122      	bne.n	80024e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d11b      	bne.n	80024e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0204 	mvn.w	r2, #4
 80024b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f98a 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 80024d4:	e005      	b.n	80024e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f97d 	bl	80027d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f98c 	bl	80027fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d122      	bne.n	800253c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b08      	cmp	r3, #8
 8002502:	d11b      	bne.n	800253c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0208 	mvn.w	r2, #8
 800250c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2204      	movs	r2, #4
 8002512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f960 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f953 	bl	80027d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f962 	bl	80027fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b10      	cmp	r3, #16
 8002548:	d122      	bne.n	8002590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b10      	cmp	r3, #16
 8002556:	d11b      	bne.n	8002590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0210 	mvn.w	r2, #16
 8002560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2208      	movs	r2, #8
 8002566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f936 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 800257c:	e005      	b.n	800258a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f929 	bl	80027d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f938 	bl	80027fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b01      	cmp	r3, #1
 800259c:	d10e      	bne.n	80025bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0201 	mvn.w	r2, #1
 80025b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe fe26 	bl	8001208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c6:	2b80      	cmp	r3, #128	; 0x80
 80025c8:	d10e      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d107      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fa6b 	bl	8002abe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d10e      	bne.n	8002614 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d107      	bne.n	8002614 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800260c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f8fc 	bl	800280c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b20      	cmp	r3, #32
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b20      	cmp	r3, #32
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0220 	mvn.w	r2, #32
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fa36 	bl	8002aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_TIM_ConfigClockSource+0x1c>
 8002660:	2302      	movs	r3, #2
 8002662:	e0b4      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x186>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800268a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269c:	d03e      	beq.n	800271c <HAL_TIM_ConfigClockSource+0xd4>
 800269e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a2:	f200 8087 	bhi.w	80027b4 <HAL_TIM_ConfigClockSource+0x16c>
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026aa:	f000 8086 	beq.w	80027ba <HAL_TIM_ConfigClockSource+0x172>
 80026ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b2:	d87f      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x16c>
 80026b4:	2b70      	cmp	r3, #112	; 0x70
 80026b6:	d01a      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0xa6>
 80026b8:	2b70      	cmp	r3, #112	; 0x70
 80026ba:	d87b      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x16c>
 80026bc:	2b60      	cmp	r3, #96	; 0x60
 80026be:	d050      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x11a>
 80026c0:	2b60      	cmp	r3, #96	; 0x60
 80026c2:	d877      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x16c>
 80026c4:	2b50      	cmp	r3, #80	; 0x50
 80026c6:	d03c      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0xfa>
 80026c8:	2b50      	cmp	r3, #80	; 0x50
 80026ca:	d873      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x16c>
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d058      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0x13a>
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d86f      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x16c>
 80026d4:	2b30      	cmp	r3, #48	; 0x30
 80026d6:	d064      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x15a>
 80026d8:	2b30      	cmp	r3, #48	; 0x30
 80026da:	d86b      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x16c>
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d060      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x15a>
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d867      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x16c>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d05c      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x15a>
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d05a      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x15a>
 80026ec:	e062      	b.n	80027b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f000 f95e 	bl	80029be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002710:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	609a      	str	r2, [r3, #8]
      break;
 800271a:	e04f      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f000 f947 	bl	80029be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800273e:	609a      	str	r2, [r3, #8]
      break;
 8002740:	e03c      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	461a      	mov	r2, r3
 8002750:	f000 f8be 	bl	80028d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2150      	movs	r1, #80	; 0x50
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f915 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 8002760:	e02c      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6859      	ldr	r1, [r3, #4]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	461a      	mov	r2, r3
 8002770:	f000 f8dc 	bl	800292c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2160      	movs	r1, #96	; 0x60
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f905 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 8002780:	e01c      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6859      	ldr	r1, [r3, #4]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	461a      	mov	r2, r3
 8002790:	f000 f89e 	bl	80028d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2140      	movs	r1, #64	; 0x40
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f8f5 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 80027a0:	e00c      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4619      	mov	r1, r3
 80027ac:	4610      	mov	r0, r2
 80027ae:	f000 f8ec 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 80027b2:	e003      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      break;
 80027b8:	e000      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
	...

08002820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <TIM_Base_SetConfig+0xa8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d007      	beq.n	8002848 <TIM_Base_SetConfig+0x28>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d003      	beq.n	8002848 <TIM_Base_SetConfig+0x28>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a22      	ldr	r2, [pc, #136]	; (80028cc <TIM_Base_SetConfig+0xac>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d108      	bne.n	800285a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <TIM_Base_SetConfig+0xa8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <TIM_Base_SetConfig+0x52>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002868:	d003      	beq.n	8002872 <TIM_Base_SetConfig+0x52>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a17      	ldr	r2, [pc, #92]	; (80028cc <TIM_Base_SetConfig+0xac>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d108      	bne.n	8002884 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <TIM_Base_SetConfig+0xa8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d103      	bne.n	80028b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	615a      	str	r2, [r3, #20]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	40000400 	.word	0x40000400

080028d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f023 0201 	bic.w	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f023 030a 	bic.w	r3, r3, #10
 800290c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	621a      	str	r2, [r3, #32]
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0210 	bic.w	r2, r3, #16
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	031b      	lsls	r3, r3, #12
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002968:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	621a      	str	r2, [r3, #32]
}
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f043 0307 	orr.w	r3, r3, #7
 80029ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	609a      	str	r2, [r3, #8]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029be:	b480      	push	{r7}
 80029c0:	b087      	sub	sp, #28
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	021a      	lsls	r2, r3, #8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	609a      	str	r2, [r3, #8]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e041      	b.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d009      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d004      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d10c      	bne.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400

08002aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <__libc_init_array>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	4d0c      	ldr	r5, [pc, #48]	; (8002b08 <__libc_init_array+0x38>)
 8002ad6:	4c0d      	ldr	r4, [pc, #52]	; (8002b0c <__libc_init_array+0x3c>)
 8002ad8:	1b64      	subs	r4, r4, r5
 8002ada:	10a4      	asrs	r4, r4, #2
 8002adc:	42a6      	cmp	r6, r4
 8002ade:	d109      	bne.n	8002af4 <__libc_init_array+0x24>
 8002ae0:	f000 f822 	bl	8002b28 <_init>
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	4d0a      	ldr	r5, [pc, #40]	; (8002b10 <__libc_init_array+0x40>)
 8002ae8:	4c0a      	ldr	r4, [pc, #40]	; (8002b14 <__libc_init_array+0x44>)
 8002aea:	1b64      	subs	r4, r4, r5
 8002aec:	10a4      	asrs	r4, r4, #2
 8002aee:	42a6      	cmp	r6, r4
 8002af0:	d105      	bne.n	8002afe <__libc_init_array+0x2e>
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af8:	4798      	blx	r3
 8002afa:	3601      	adds	r6, #1
 8002afc:	e7ee      	b.n	8002adc <__libc_init_array+0xc>
 8002afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b02:	4798      	blx	r3
 8002b04:	3601      	adds	r6, #1
 8002b06:	e7f2      	b.n	8002aee <__libc_init_array+0x1e>
 8002b08:	08002b7c 	.word	0x08002b7c
 8002b0c:	08002b7c 	.word	0x08002b7c
 8002b10:	08002b7c 	.word	0x08002b7c
 8002b14:	08002b80 	.word	0x08002b80

08002b18 <memset>:
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4402      	add	r2, r0
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d100      	bne.n	8002b22 <memset+0xa>
 8002b20:	4770      	bx	lr
 8002b22:	f803 1b01 	strb.w	r1, [r3], #1
 8002b26:	e7f9      	b.n	8002b1c <memset+0x4>

08002b28 <_init>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr

08002b34 <_fini>:
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	bf00      	nop
 8002b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3a:	bc08      	pop	{r3}
 8002b3c:	469e      	mov	lr, r3
 8002b3e:	4770      	bx	lr
